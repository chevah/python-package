#
# GitHub actions for building and testing through containers.
#
# For best support, use `-latest` for runners spinning up containers. More at
# https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners.

name: Docker

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

env:
  USER: chevah
  CHEVAH_CONTAINER: yes

# Using a job name that doesn't contain the OS name, to minimize the risk of
# confusion with the OS names of the containers, which are the relevant ones.
jobs:
  latest:
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        container: [ 'alpine:3.14', 'centos:8.2.2004', 'centos:5.11' ]
    timeout-minutes: 30
    steps:

    # OpenSSL gets updated by apk, but that is the Alpine way, so it's fine.
    - name: Alpine setup
      if: startsWith(matrix.container, 'alpine')
      run: |
        apk upgrade -U
        apk add git curl bash gcc make m4 automake libtool patch zlib-dev libffi-dev ncurses-dev linux-headers musl-dev openssl-dev lddtree shadow sudo openssh-client
        curl -o /usr/local/bin/paxctl https://binary.chevah.com/third-party-stuff/alpine/paxctl-3.12
        chmod +x /usr/local/bin/paxctl

    # Stick to CentOS 8.2 as OpenSSL got updated in 8.3 from 1.1.1c to 1.1.1g.
    - name: CentOS 8.2 setup
      if: matrix.container == 'centos:8.2.2004'
      run: |
        sed -i s/^mirrorlist=/#mirrorlist=/ /etc/yum.repos.d/*.repo
        sed -i s@^#baseurl=http://mirror.centos.org/\$contentdir/\$releasever/@baseurl=https://vault.centos.org/8.2.2004/@ /etc/yum.repos.d/*.repo
        yum -y upgrade
        yum -y install git curl gcc make m4 automake libtool patch openssl-devel zlib-devel libffi-devel ncurses-devel sudo which openssh-clients

    # Final CentOS 5 version is used to build the generic Linux package.
    - name: CentOS 5.11 setup
      if: matrix.container == 'centos:5.11'
      run: |
        sed -i s/^mirrorlist=/#mirrorlist=/ /etc/yum.repos.d/*.repo
        sed -i s@^#baseurl=http://mirror.centos.org/centos/\$releasever/@baseurl=http://vault.centos.org/5.11/@ /etc/yum.repos.d/*.repo
        yum -y upgrade
        # Use http://binary.chevah.com/third-party-stuff/centos5/tuxad/
        # when tuxad.de dissapears, it has the minimum required stuff.
        rpm -i http://www.tuxad.de/rpms/tuxad-release-5-1.noarch.rpm
        yum -y install wget curl gcc44 make m4 automake libtool patch openssl-devel zlib-devel libffi-devel ncurses-devel sudo which openssh-clients
        ln -s /usr/bin/gcc44 /usr/local/bin/gcc
        wget --mirror --no-parent https://binary.chevah.com/third-party-stuff/centos5/endpoint/
        cd binary.chevah.com/third-party-stuff/centos5/endpoint/
        rpm -i local-perl-*.rpm
        rpm -i --nodeps git{-core,}-2.5.0-1.ep.x86_64.rpm

    # GHA's checkout action doesn't work on CentOS 5.
    - name: Clone repo independently
      run: |
        # No debugging on GHA's containers, so we clone the minimum required stuff.
        git clone --depth 1 --single-branch --branch ${GITHUB_HEAD_REF} https://github.com/chevah/python-package.git
        cd python-package

    - name: Detect current OS
      run: |
        cd python-package
        ./brink.sh detect_os

    - name: Build
      run: |
        cd python-package
        ./chevah_build build

    - name: Test
      run: |
        cd python-package
        ./chevah_build test

    # On a Docker container, everything runs as root by default.
    - name: Chevah user setup
      run: |
        useradd -g adm -s /bin/bash -m chevah
        echo '%adm    ALL=NOPASSWD: ALL' >> /etc/sudoers
        chown -R chevah python-package

    # And compat tests must run as regular user with sudo rights.
    - name: Compat tests
      run: |
        cd python-package
        su chevah -c "./chevah_build compat"

    # Using `~/` is problematic under Docker, use `/root/`.
    # Remove key in same step to avoid leaving it on disk if publishing fails.
    - name: Upload testing package
      run: |
        mkdir -pv /root/.ssh/
        cd python-package
        touch priv_key
        chmod 600 priv_key
        echo "${{ secrets.SFTPPLUS_BIN_PRIV_KEY }}" > priv_key
        echo "${{ secrets.SFTPPLUS_BIN_HOST_KEY }}" > /root/.ssh/known_hosts
        ./publish_dist.sh
        rm priv_key
