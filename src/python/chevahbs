#!/usr/bin/env bash
#
# Chevah Build Script for Python.
#
# Import shared code.
. ./functions.sh

#
# Called inside the build folder to prepare the Python source.
#
chevahbs_patch() {
    # First we apply the generic patches.
    if [ "$OS" = "windows"  ]; then
        echo "No sources to patch in Windows."
        return
    fi

    # Our own patch to avoid compiling certain modules.
    echo "Applying disabled_modules.patch:"
    execute patch < disabled_modules.patch

    # Then we apply features-specific patches.
    if [ "$BUILD_LIBEDIT" = "yes" ]; then
        # Adapted from the v4 patch at https://bugs.python.org/issue13501.
        echo "Applying readline_libedit.patch:"
        execute patch -p0 < readline_libedit.patch
    fi
    # And finally we apply the OS-specific patches.
    case $OS in
        # BLDSHARED fixes from https://bugs.python.org/issue18235.
        aix*)
            echo "Applying aix_bldshared.patch:"
            execute patch -p0 < aix_bldshared.patch
            ;;
        # Adds custom paths and a fix from http://bugs.python.org/issue1471934.
        solaris10*)
            echo "Applying solaris10_paths.patch:"
            execute patch < solaris10_paths.patch
            ;;
        hpux*)
            # Our patch to use -fPIC extra argument for linking only with GCC.
            echo "Applying hpux_fpic.patch:"
            execute patch < hpux_fpic.patch
            # Our patch to import _ssl for working crypto.
            echo "Applying hpux_site.patch:"
            execute patch -p0 < hpux_site.patch
            # The second patch from https://bugs.python.org/issue18777.
            echo "Applying crypto_threadid.patch:"
            execute patch -p0 < crypto_threadid.patch
            ;;
        openbsd63)
            # Support for LibreSSL 2.7 in Python 2.7.14.
            if [ "$PYTHON_BUILD_VERSION" = "2.7.14" ]; then
                execute patch -p1 < libressl27-support.patch
            fi
            ;;
    esac
}


chevahbs_configure() {
    install_folder="$1"

    CONFIG_ARGS="--disable-shared"
    CONFIGURE_ENVIRONMENT=""

    if [ "$OS" != "windows"  ]; then
        echo "Copying our header files among Python's ones..."
        execute cp -r "$INSTALL_FOLDER"/include/* ./Include/
    fi
    case $OS in
        "ubuntu1004")
            # On Ubuntu there are no libXXX.o, but rather linked against the
            # full version number.
            CONFIG_ARGS="${CONFIG_ARGS} \
                --with-bz2-version=1 \
                --with-crypt-version=1 \
                --with-openssl-version=0.9.8 \
                "
            ;;
        "ubuntu1204")
            CONFIG_ARGS="${CONFIG_ARGS} \
                --with-bz2-version=1 \
                --with-crypt-version=1 \
                --with-openssl-version=1.0.0 \
                "
            ;;
        aix*)
            # Workaround for http://bugs.python.org/issue21917
            echo "import os; os.__dict__.pop('O_NOFOLLOW', None)" \
                >> Lib/site-packages/sitecustomize.py
            # Computed goto's are a problem with Python 2.7.13,
            # details at https://bugs.python.org/issue9799.
            CONFIG_ARGS="${CONFIG_ARGS} \
                --with-system-ffi \
                --without-computed-gotos \
                "
            ;;
        solaris10)
            # In Solaris 10, the default OpenSSL is installed in /usr/sfw/.
            # Both include options are needed to match both the native Sun
            # Studio compiler and GCC.
            if [ "${ARCH%64}" = "$ARCH" ]; then
                echo "_ssl _ssl.c -I/usr/sfw/include" \
                    "-I/usr/sfw/include/openssl -L/usr/sfw/lib" \
                    "-R/usr/sfw/lib -lssl -lcrypto" >> Modules/Setup.local
            else
                echo "_ssl _ssl.c -I/usr/sfw/include" \
                    "-I/usr/sfw/include/openssl -L/usr/sfw/lib/64" \
                    "-R/usr/sfw/lib/64 -lssl -lcrypto" >> Modules/Setup.local
            fi
            ;;
        hpux*)
            LDFLAGS="${LDFLAGS} -lxnet"
            CONFIG_ARGS="${CONFIG_ARGS} \
                --with-system-ffi \
                "
            ;;
        osx*|macos*)
            CONFIG_ARGS="${CONFIG_ARGS} --without-gcc"
            ;;
        archlinux)
            LDFLAGS="$LDFLAGS -ltinfo"
            ;;
        freebsd*)
            LDFLAGS="$LDFLAGS -lncurses"
            ;;
        openbsd*)
            # In OpenBSD 6.1 and newer we need to mark the Python binary as
            # "wxneeded" because it breaks the mandatory W^X protection.
            LDFLAGS="$LDFLAGS -Wl,-z,wxneeded"
            ;;
    esac

    # This requires the v4 patch from https://bugs.python.org/issue13501.
    if [ "$BUILD_LIBEDIT" = "yes" ]; then
        CONFIG_ARGS="${CONFIG_ARGS} --with-readline=editline"
    fi

    case $OS in
        windows)
            echo "Skip configure on Windows."
            ;;
        *)
            execute ./configure --prefix="" $CONFIG_ARGS
            # These files are already created in the Python distribution,
            # but for some strange reason, make tries to recreate them.
            # We just touch them so that make will see them up to date.
            touch Include/Python-ast.h Python/Python-ast.c
            ;;
    esac
}


chevahbs_compile() {
    case $OS in
        windows)
            echo "Skip make on Windows."
            ;;
        *)
            echo "Patching the git rev id into Python's version string..."
            cp Modules/getbuildinfo.c Modules/getbuildinfo.c.orig
            VCS_ID="gitid"
            if [ $PYTHON_BUILD_VERSION == "2.7.8" ] ; then
                VCS_ID="hgid"
            fi
            execute sed -e \
                s/$VCS_ID\ =\ \"default\"/$VCS_ID\ =\ \"$PYTHON_PACKAGE_VERSION\"/g \
                Modules/getbuildinfo.c.orig > Modules/getbuildinfo.c
            execute $MAKE
            ;;
    esac
}


chevahbs_install() {
    install_folder=$1
    case $OS in
        windows)
            local destination=$INSTALL_FOLDER/lib

            # On Windows we don't build from source but rather create the
            # distribution from pre-compiled binaries.
            current_win_path=`pwd -W | sed 's|\/|\\\\|g'`
            install_win_path=`cd $INSTALL_FOLDER && pwd -W | sed 's|\/|\\\\|g'`

            echo "Extracting MSI to $install_win_path"
            execute msiexec \
                //a $current_win_path\\python-installer.msi \
                //qn TARGETDIR=$install_win_path\\lib

            # Copy Windows redistributables
            local redistributables=../../win-tools/redistributables/
            echo "Copying redistributables for Windows"
            execute cp $redistributables/$REDISTRIBUTABLE_VERSION/* $destination

            wipe_manifest $destination/python.exe
            wipe_manifest $destination/pythonw.exe
            wipe_manifest $destination/python27.dll

            # Remove Python MSI installer.
            echo "Removing: $destination/python-installer.msi"
            execute rm -f --verbose $destination/python-installer.msi

            # add cp65001 as an utf-8 alias.
            execute mv \
                $destination/lib/encodings/aliases.py \
                $destination/lib/encodings/aliases.old
            execute \
                sed "s|# utf_8 codec|# utf_8 codec\n    'cp65001'            : 'utf_8',|" < $destination/lib/encodings/aliases.old > $destination/lib/encodings/aliases.py
            ;;
        *)
            if [ "${OS%alpine*}" = "" ]; then
                # EMUTRAMP required for full functionality under a grsec kernel.
                # Don't use "paxmark", file attributes will be lost when tar'ed.
                execute paxctl -cE python
            fi
            execute $MAKE install DESTDIR=$INSTALL_FOLDER
            ;;
    esac
}


select_chevahbs_command $@
