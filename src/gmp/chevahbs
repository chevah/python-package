#!/usr/bin/env bash
#
# Chevah Build Script for GMP.
#
# Import shared code.
. ./functions.sh


chevahbs_configure() {
    # We want only static build so that we don't have to mess with LIBPATH.
    CONF_OPTS="--disable-shared --enable-static"
    if [ x${ARCH} == x"x64" -o x${ARCH} == x"x86" ]; then
        # Select a "fat binary" build on x86/x64, where optimized low level
        # subroutines are chosen at runtime according to the CPU detected.
        # This means more code, but gives good performance on all chips.
        CONF_OPTS="$CONF_OPTS --enable-fat"
        if [ x${ARCH} == x"x64" ]; then
            # Fix lib relocation error for x64. More details at:
            # https://www.gentoo.org/proj/en/base/amd64/howtos/index.xml?part=1&chap=3#doc_chap7
            CONF_OPTS="$CONF_OPTS --with-pic"
        fi
    fi
    case $OS in
        raspbian*)
            CONF_OPTS="$CONF_OPTS --build=armcortexa8neon-unknown-linux-gnueabihf --with-pic"
            ;;
        hpux*)
            # Parallel builds frequently fail for GMP, so we use gmake here.
            MAKE="gmake"
            unset CFLAGS
            ;;
    esac
    execute eval $CONF_VARS ./configure --prefix="" $CONF_OPTS
}


chevahbs_compile() {
    execute $MAKE
    # GMP needs to be checked even after a successful compilation.
    # See its INSTALL file for details.
    execute $MAKE check
}


chevahbs_install() {
    install_folder=$1
    execute $MAKE install DESTDIR=$INSTALL_FOLDER
}


select_chevahbs_command $@

