#!/usr/bin/env bash
#
# Chevah Build Script for Python.
#
# build
# test
# publish_production
# publish_staging
#

# Import shared code.
. ./functions.sh

# List of OS packages required for building Python.
UBUNTU_PACKAGES="gcc make libssl-dev zlib1g-dev m4 texinfo"
RHEL_PACKAGES="gcc make openssl-devel zlib-devel m4 texinfo"
SLES_PACKAGES="gcc make libopenssl-devel zlib-devel m4 texinfo"
# List of OS packages requested to be installed by this script.
INSTALLED_PACKAGES=''
# For the moment, we don't install anything on OS X, Solaris, AIX and
# unsupported Linux distros. The build requires a C compiler, GNU make, m4,
# makeinfo (from texinfo, optional) and the header files for OpenSSL and zlib.
# On platforms with a choice of C compilers, you may choose among them by
# setting/unsetting CC and CXX in paver.sh.

LIBFFI_VERSION=3.2.1
GMP_VERSION=6.0.0
PYTHON_BUILD_VERSION=2.7.8
PYSQLITE_VERSION=2.6.3
SQLITE_VERSION=3.8.1

EXTRA_LIBRARIES="\
   python-modules/pyOpenSSL-0.13 \
   python-modules/pycrypto-2.6.1 \
   python-modules/python-setproctitle-1.1.8.dev0 \
   "

PROG=$0
DIST_FOLDER='dist'
BUILD_FOLDER='build'

# Get default values from main paver script.
./paver.sh detect_os
if [ "$?" -ne 0 ]; then
    exit 1
fi
PYTHON_VERSION=`cut -d' ' -f 2 DEFAULT_VALUES`
OS=`cut -d' ' -f 3 DEFAULT_VALUES`
ARCH=`cut -d' ' -f 4 DEFAULT_VALUES`
TIMESTAMP=`date +'%Y%m%d'`
rm DEFAULT_VALUES

# In Solaris and AIX we use $ARCH to choose if we build a 32bit or 64bit
# package. This way we are able to force a 32bit build on a 64bit machine,
# for example by exporting ARCH in paver.sh as "x86" instead of "x64" or
# "ppc" instead of "ppc64".
# We also use $ARCH when building the statically compiled libs: libffi and GMP.
export ARCH
# Explicitly choose the C compiler in order to make it possible to switch
# between native compilers and GCC on platforms such as AIX and Solaris.
# For that, paver.sh has the relevant lines to edit.
export CC='gcc'
# CXX is not really needed, we export it to make sure g++ won't get picked up
# when not using gcc and thus silence the associated configure warning. However,
# we'll need to set CPPFLAGS later for linking to statically-compiled libs.
export CXX='g++'
# Use PIC (Position Independent Code) with GCC on 64-bit arches.
if [ "$CC" = 'gcc' -a ${ARCH%%64} != "$ARCH" ]; then
    export CFLAGS="${CFLAGS} -fPIC"
fi

LOCAL_PYTHON_BINARY_DIST="$PYTHON_VERSION-$OS-$ARCH"
LOCAL_PYTHON_BINARY=./$LOCAL_PYTHON_BINARY_DIST/bin/python
INSTALL_FOLDER=$PWD/${BUILD_FOLDER}/$LOCAL_PYTHON_BINARY_DIST
PYTHON_BIN=$INSTALL_FOLDER/bin/python
PYTHON_BUILD_FOLDER="$PYTHON_VERSION-$OS-$ARCH"

export MAKE=make

case $OS in
    aix*)
        # By default, we use IBM's XL C compiler. Remove or comment out the
        # CC and CXX lines to use GCC. However, beware that GCC 4.2 from
        # IBM's RPMs will fail with GMP and Python!
        export CC="xlc_r"
        export CXX="xlC_r"
        export MAKE=gmake
        export PATH=/usr/vac/bin:$PATH
        export CFLAGS="-O2"
        # IBM's OpenSSL libs are mixed 32/64bit binaries in AIX, so we need to
        # be specific about what kind of build we want, because otherwise we
        # might get 64bit libraries (eg. when building GMP).
        if [ "${ARCH%64}" = "$ARCH" ]; then
            export OBJECT_MODE="32"
            export ABI="32"
            export AR="ar -X32"
            if [ "${CC}" != "gcc" ]; then
                export CFLAGS="$CFLAGS -qmaxmem=-1 -q32"
            fi
        else
            export OBJECT_MODE="64"
            export ABI="mode64"
            export AR="ar -X64"
            if [ "${CC}" != "gcc" ]; then
                export CFLAGS="$CFLAGS -qmaxmem=-1 -q64"
            fi
        fi
    ;;
    solaris*)
        if [ "$OS" = "solaris10" ]; then
            # Solaris 10 has OpenSSL 0.9.7, but Python 2 versions starting with
            # 2.7.9 do not support it, see https://bugs.python.org/issue20981.
            PYTHON_BUILD_VERSION=2.7.8
            # These are the default-included GNU make and makeinfo.
            export MAKE=/usr/sfw/bin/gmake
            export MAKEINFO=/usr/sfw/bin/makeinfo
            # We favour the BSD-flavoured "install" over the default one.
            # "ar", "nm" and "ld" are included by default in the same path.
            export PATH=/usr/ccs/bin/:$PATH
        fi
        # By default, we use Sun's Studio compiler. Comment these two for GCC.
        export CC="cc"
        export CXX="CC"
        # GCC is not in the usual PATH, we add the path to it if we want it.
        if [ "${CC}" = "gcc" ]; then
            export PATH="$PATH:/usr/sfw/bin/"
        fi
        # And this is where the GNU libs are in Solaris 10, including OpenSSL.
        if [ "${ARCH%64}" = "$ARCH" ]; then
            export LDFLAGS="-L/usr/sfw/lib -R/usr/sfw/lib"
        else
            export LDFLAGS="-m64 -L/usr/sfw/lib/64 -R/usr/sfw/lib/64"
            export CFLAGS="-m64"
        fi
    ;;
    hpux*)
        # For HP-UX we haven't managed yet to compile libffi and GMP with the
        # HP compiler, so we are NOT exporting custom values for CC and CXX.
        export MAKE=gmake
    ;;
    windows*)
        LOCAL_PYTHON_BINARY=./$LOCAL_PYTHON_BINARY_DIST/lib/python
        ;;
esac


#
# Install OS package required to build Python.
#
install_dependencies() {

    packages='packages-not-defined'
    install_command='install-command-not-defined'
    check_command='check-command-not-defined'

    case $OS in
        ubuntu*)
            packages=$UBUNTU_PACKAGES
            install_command='sudo apt-get --assume-yes install'
            check_command='dpkg --status'
        ;;
        rhel*)
            packages=$RHEL_PACKAGES
            install_command='sudo yum -y install'
            check_command='rpm --query'
        ;;
        sles*)
            packages=$SLES_PACKAGES
            install_command='sudo zypper --non-interactive install -l'
            check_command='rpm --query'
        ;;
        linux|windows|aix*|solaris*|osx*)
            packages=''
            install_command=''
            check_command=''
        ;;
    esac

    # We install one package after another since some package managers
    # (I am looking at you yum) will exit with 0 exit code if at least
    # one package was successfully installed.
    if [ -n "$packages" ]; then
        echo "Checking for packages to be installed..."
        for package in $packages ; do
            echo "Checking if $package is installed..."
            $check_command $package
            if [ $? -ne 0 ]; then
                echo "Installing $package using ${install_command}..."
                execute $install_command $package \
                    && INSTALLED_PACKAGES="$INSTALLED_PACKAGES $package"
            fi
        done
    fi
}


#
# This function should do its best to remove the packages previously
# installed by `install_dependencies` and leave the system clean.
#
remove_dependencies() {
    local rpm_leaves
    local zypper_options
    local libzypp_version

    if [ -n "$INSTALLED_PACKAGES" ]; then
        echo "Uninstalling the following packages: $INSTALLED_PACKAGES"
    else
        return
    fi

    case $OS in
        ubuntu*)
            execute sudo apt-get --assume-yes --purge remove $INSTALLED_PACKAGES
            execute sudo apt-get --assume-yes --purge autoremove
            ;;
        rhel*)
            execute sudo yum -y remove $INSTALLED_PACKAGES
            # RHEL7's yum learned how to auto-remove installed dependencies.
            if [ ${OS##rhel} -ge 7 ]; then
                execute sudo yum -y autoremove
            else
                # This partially works in RHEL 4 to 6 for automatically
                # removing packages installed as dependencies (aka "leaves").
                rhel_yum_autoremove() {
                    rpm_leaves=$(package-cleanup --leaves --quiet 2>/dev/null \
                        | egrep -v ^'Excluding|Finished')
                    if [ -z "$rpm_leaves" ]; then
                        (exit 0)
                    else
                        execute sudo yum -y remove $rpm_leaves
                        rhel_autoremove
                    fi
                }
                rhel_yum_autoremove
            fi
            ;;
        sles*)
            zypper_options="--non-interactive"
            # zypper version 7.4 got support for automatically removing
            # unneeded packages, but only when removing installed packages.
            libzypp_version=$(rpm --query --queryformat '%{VERSION}' libzypp)
            IFS=. read -a libzypp_version_array <<< "$libzypp_version"
            if [ ${libzypp_version_array[0]} -gt 7 ]; then
                zypper_options="$zypper_options --clean-deps"
            fi
            execute sudo zypper $zypper_options remove $INSTALLED_PACKAGES
            ;;
    esac
}


help_text_clean="Clean the build."
command_clean() {
    if [ -e ${BUILD_FOLDER} ]; then
        echo 'Previous build sub-directory found. Removing...'
        rm -rf ${BUILD_FOLDER}
    fi
}

help_text_build="Create the Python binaries for current OS."
command_build() {
    install_dependencies

    # Clean the build dir to avoid contamination from previous builds.
    command_clean

    case $OS in
        aix*|solaris*|hpux*)
            build 'libffi' "libffi-$LIBFFI_VERSION" ${PYTHON_BUILD_FOLDER}
            ;;
    esac


    case $OS in
        windows*)
            # For Windows we don't build everthing from source yet.
            echo "Skipping GMP"
            build 'python' "Python-$PYTHON_BUILD_VERSION-windows" ${PYTHON_BUILD_FOLDER}
            echo "Skipping sqlite and extra libraries"
            # For Windows we don't build everthing from source yet.
            echo "Skipping cleaing install folder"
            ;;
        *)
            # Build GMP on all other platforms.
            build 'gmp' "gmp-$GMP_VERSION" ${PYTHON_BUILD_FOLDER}

            build 'python' "Python-$PYTHON_BUILD_VERSION" ${PYTHON_BUILD_FOLDER}

            command_build_sqlite

            command_build_python_extra_libraries

            execute pushd ${BUILD_FOLDER}/${PYTHON_BUILD_FOLDER}
                # Clean the build folder.
                execute rm -rf tmp
                execute mkdir -p lib/config
                safe_move share lib/config
                safe_move pysqlite2-doc lib/config
                # Move all bin to lib/config
                safe_move bin lib/config
                execute mkdir bin
                # Copy back python binary
                execute cp lib/config/bin/$PYTHON_VERSION bin/python
            execute popd
            ;;
    esac

    remove_dependencies

    make_dist 'python' ${PYTHON_BUILD_FOLDER}
}


#
# Build pysqlite with static linked SQLite.
#
command_build_sqlite() {
    target_folder=${BUILD_FOLDER}/pysqlite
    amalgamation_folder=${BUILD_FOLDER}/pysqlite/amalgamation

    initialize_python_module \
        "python-modules/pysqlite-$PYSQLITE_VERSION" $target_folder

    # Prepare SQLite source.
    execute rm -rf $amalgamation_folder
    execute cp -r "src/sqlite/SQLite-$SQLITE_VERSION/" $amalgamation_folder

    # Build and install.
    execute pushd $target_folder
        execute $PYTHON_BIN setup.py build_static
        execute $PYTHON_BIN setup.py install
    execute popd

}

#
# Compile and install all Python extra libraries.
#
command_build_python_extra_libraries() {
    # Update Python config Makefile to use the python that we have just
    # created.
    makefile=$INSTALL_FOLDER/lib/$PYTHON_VERSION/config/Makefile
    makefile_orig=$INSTALL_FOLDER/lib/$PYTHON_VERSION/config/Makefile.orig
    execute cp $makefile $makefile_orig
    sed "s#^prefix=.*#prefix= $INSTALL_FOLDER#" $makefile_orig > $makefile

    # We need GMP or MPIR for fast math in PyCrypto. We use GMP because
    # its devs do a better job of supporting exotic platforms such as AIX.
    cp $INSTALL_FOLDER/tmp/gmp/gmp.h $INSTALL_FOLDER/include
    cp $INSTALL_FOLDER/tmp/gmp/libgmp* $INSTALL_FOLDER/lib
    export CPPFLAGS="${CPPFLAGS} -I$INSTALL_FOLDER/include/"
    export LDFLAGS="${LDFLAGS} -L$INSTALL_FOLDER/lib/"

    for library in $EXTRA_LIBRARIES ; do
        # Library is in the form pyopenssl/PyOpenssl-2.4.5
        version_folder=${library#*/}
        target_folder=${BUILD_FOLDER}/$version_folder

        initialize_python_module $library $target_folder

        execute pushd $target_folder
            execute $PYTHON_BIN setup.py install
        execute popd

    done
    execute mv $makefile_orig $makefile
}


#
# Initialize Python module for build.
#
initialize_python_module(){
    source_folder=$1
    larget_folder=$1

    execute rm -rf $target_folder
    execute cp -r $source_folder $target_folder
    execute pushd $target_folder
        if [ -f setup.cfg ] ; then
            echo "include_dirs=$INSTALL_FOLDER/include" >> setup.cfg
            echo "library_dirs=$INSTALL_FOLDER/lib" >> setup.cfg
        fi

        case $OS in
            aix*)
                # Copy special link steps in local folder.
                mkdir -p Modules
                cp $INSTALL_FOLDER/lib/$PYTHON_VERSION/config/* Modules
            ;;
            solaris*)
                # Copy special link steps in local folder.
                mkdir -p Modules
                cp $INSTALL_FOLDER/lib/$PYTHON_VERSION/config/* Modules
                # This is needed for pyOpenSSL.
                if [ "${ARCH%64}" = "$ARCH" ]; then
                    execute $PYTHON_BIN setup.py build_ext -I/usr/sfw/include \
                        -L/usr/sfw/lib
                else
                    execute $PYTHON_BIN setup.py build_ext -I/usr/sfw/include \
                        -L/usr/sfw/lib/64
                fi
            ;;
        esac
    execute popd
}


#
# Test the newly created Python binary dist.
#
help_text_test=\
"Run a quick test for the Python from build."
command_test() {
    test_file='test_python_binary_dist.py'
    execute mkdir -p build/
    execute cp python-modules/chevah-python-test/${test_file} build/
    execute cp python-modules/chevah-python-test/get_binaries_deps.sh build/
    execute pushd build
    execute $LOCAL_PYTHON_BINARY ${test_file}
    execute popd
}


help_text_publish_python=\
"Upload Python binaries for current OS."
command_publish_python() {
    execute rsync -qrlDvcz \
        ${DIST_FOLDER}/$PYTHON_VERSION/ \
        ${BINARY_DIST_PUBLISH_URI}/$PYTHON_VERSION/
}


# Launch the whole thing.
select_command $@
