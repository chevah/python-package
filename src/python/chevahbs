#!/usr/bin/env bash
#
# Chevah Build Script for Python.
#
# Import shared code.
. ./functions.sh

chevahbs_configure() {
    CONFIG_ARGS="--disable-shared"

    CONFIGURE_ENVIRONMENT=""

    case $OS in
        "ubuntu1004")
            # On Ubuntu there are no libXXX.o, but rather linked against the
            # full version number.
            CONFIG_ARGS="${CONFIG_ARGS} \
                --with-bz2-version=1 \
                --with-crypt-version=1 \
                --with-openssl-version=0.9.8 \
                "
            ;;
        "ubuntu1204")
            CONFIG_ARGS="${CONFIG_ARGS} \
                --with-bz2-version=1 \
                --with-crypt-version=1 \
                --with-openssl-version=1.0.0 \
                "
            ;;
        aix*)
            # In AIX we build _ctypes with external libffi, but not the system
            # one. We use our libffi files and statically link against its libs.
            execute mkdir -p build/libffi
            execute cp $INSTALL_FOLDER/tmp/libffi/* build/libffi/
            # The following two parameters are picked up by Python's setup.py
            # and will convince it to use our external libffi for _ctypes.
            export CPPFLAGS="${CPPFLAGS} -Ibuild/libffi/"
            export LDFLAGS="${LDFLAGS} -Lbuild/libffi/"
            # Workaround for http://bugs.python.org/issue21917
            echo "import os; os.__dict__.pop('O_NOFOLLOW', None)" \
                >> Lib/site-packages/sitecustomize.py
            # MAXMEM option with a value greater than 8192.
            CONFIG_ARGS="${CONFIG_ARGS} \
                --with-system-ffi \
                "
            ;;
        solaris10)
            # In Solaris 10, the default OpenSSL is installed in /usr/sfw/.
            # Both include options are needed to match both the native Sun
            # Studio compiler and GCC.
            if [ "${ARCH%64}" = "$ARCH" ]; then
                echo "_ssl _ssl.c -I/usr/sfw/include" \
                    "-I/usr/sfw/include/openssl -L/usr/sfw/lib" \
                    "-R/usr/sfw/lib -lssl -lcrypto" >> Modules/Setup.local
            else
                echo "_ssl _ssl.c -I/usr/sfw/include" \
                    "-I/usr/sfw/include/openssl -L/usr/sfw/lib/64" \
                    "-R/usr/sfw/lib/64 -lssl -lcrypto" >> Modules/Setup.local
            fi
            ;;
        hpux*)
            export EXTRA_CFLAGS="-D_REENTRANT"
            export LIBS="-lpthread"
            CONFIG_ARGS="${CONFIG_ARGS} --without-gcc --without-ctypes"
            ;;
        osx*)
            CONFIG_ARGS="${CONFIG_ARGS} --without-gcc"
            ;;
    esac

    case $OS in
        windows)
            echo "Skip configure on Windows."
            ;;
        *)
            execute ./configure --prefix="" $CONFIG_ARGS
            # These files are already created in the Python distribution,
            # but for some strange reason, make tries to recreate them.
            # We just touch them so that make will see them up to date.
            touch Include/Python-ast.h Python/Python-ast.c
            ;;
    esac

    case $OS in
        "hpux")
            cp Makefile Makefile.orig
            # On HPUX -DNDEBUG is causing troubles.
            sed "s/^OPT=.*-O/OPT= -O/"  Makefile.orig > Makefile
            ;;
    esac

}


chevahbs_compile() {
    case $OS in
        windows)
            echo "Skip make on Windows."
            ;;
        *)
            execute $MAKE
            ;;
    esac
}


chevahbs_install() {
    install_folder=$1
    case $OS in
        windows)
            local destination=$INSTALL_FOLDER/lib
            local redistributables=../../win-tools/redistributables/
            local redistributable_version=9.00.30729.6161
            local manifest_wiper=../../win-tools/manifest-wiper.exe
            local get_pip=../../python-modules/get-pip.py

            # On Windows we don't build from source but rather create the
            # distribution from pre-compiled binaries.
            current_win_path=`pwd -W | sed 's|\/|\\\\|g'`
            install_win_path=`cd $INSTALL_FOLDER && pwd -W | sed 's|\/|\\\\|g'`

            echo "Extracting MSI to $install_win_path"
            execute msiexec \
                //a $current_win_path\\python-installer.msi \
                //qn TARGETDIR=$install_win_path\\lib

            echo "Copying redistributables"
            execute cp $redistributables/$redistributable_version/* $destination

            echo "Extracting manifests for python(w).exe and python27.dll"
            $manifest_wiper --verbose \
                --extract $destination/python.exe.embedded \
                $destination/python.exe
            $manifest_wiper --verbose \
                --extract $destination/pythonw.exe.embedded \
                $destination/pythonw.exe
            $manifest_wiper --verbose \
                --extract $destination/python27.dll.embedded \
                $destination/python27.dll

            echo "Patching manifests to use our redistributable version"
            execute sed -e 's|version="9.0.21022.8"|version="9.00.30729.6161"|' -e 's|publicKeyToken="1fc8b3b9a1e18e3b"||' < $destination/python.exe.embedded > $destination/python.exe.manifest
            execute sed -e 's|version="9.0.21022.8"|version="9.00.30729.6161"|' -e 's|publicKeyToken="1fc8b3b9a1e18e3b"||' < $destination/pythonw.exe.embedded > $destination/pythonw.exe.manifest
            execute sed -e 's|version="9.0.21022.8"|version="9.00.30729.6161"|' -e 's|publicKeyToken="1fc8b3b9a1e18e3b"||' < $destination/python27.dll.embedded > $destination/python27.dll.manifest
            execute rm -f --verbose $destination/*.embedded

            echo "Installing pip"
            execute $destination/python $get_pip $PIP_ARGS

            echo "Patching pyWin32 manifests to use our redistributable version"
            $manifest_wiper --verbose \
                --extract $destination/Lib/site-packages/win32/pythonservice.exe.embedded \
                $destination/Lib/site-packages/win32/pythonservice.exe
            $manifest_wiper --verbose \
                --extract $destination/Lib/site-packages/win32/perfmondata.dll.embedded \
                $destination/Lib/site-packages/win32/perfmondata.dll
            $manifest_wiper --verbose \
                --extract $destination/Lib/site-packages/pywin32_system32/pythoncomloader27.dll.embedded \
                $destination/Lib/site-packages/pywin32_system32/pythoncomloader27.dll

            execute sed -e 's|version="9.0.21022.8"|version="9.00.30729.6161"|' -e 's|publicKeyToken="1fc8b3b9a1e18e3b"||' < $destination/Lib/site-packages/win32/pythonservice.exe.embedded > $destination/Lib/site-packages/win32/pythonservice.exe.manifest
            execute sed -e 's|version="9.0.21022.8"|version="9.00.30729.6161"|' -e 's|publicKeyToken="1fc8b3b9a1e18e3b"||' < $destination/Lib/site-packages/win32/perfmondata.dll.embedded > $destination/Lib/site-packages/win32/perfmondata.dll.manifest
            execute rm -f --verbose $desination/Lib/site-packages/win32/*.embedded
            execute sed -e 's|version="9.0.21022.8"|version="9.00.30729.6161"|' -e 's|publicKeyToken="1fc8b3b9a1e18e3b"||' < $destination/Lib/site-packages/pywin32_system32/pythoncomloader27.dll.embedded > $destination/Lib/site-packages/pywin32_system32/pythoncomloader27.dll.manifest
            execute rm -f --verbose $desination/Lib/site-packages/pywin32_system32/*.embedded

            echo "Copy Python runtime to pyWin32 package"
            execute cp $destination/*CRT.manifest $destination/Lib/site-packages/win32/
            execute cp $destination/python27.dll.manifest $destination/Lib/site-packages/win32/
            execute cp $destination/python27.dll $destination/Lib/site-packages/win32/
            execute cp $destination/msvc?90.dll $destination/Lib/site-packages/win32/
            execute cp $destination/Lib/site-packages/pywin32_system32/*.dll $destination/Lib/site-packages/win32/

            # Remove Python MSI installer.
            echo "Removing: $destination/python-installer.msi"
            execute rm -f --verbose $destination/python-installer.msi

            # add cp65001 as an utf-8 alias.
            execute mv \
                $destination/lib/encodings/aliases.py \
                $destination/lib/encodings/aliases.old
            execute \
                sed "s|# utf_8 codec|# utf_8 codec\n    'cp65001'            : 'utf_8',|" < $destination/lib/encodings/aliases.old > $destination/lib/encodings/aliases.py
            ;;
        *)
            execute $MAKE install DESTDIR=$INSTALL_FOLDER
            ;;
    esac
}


select_chevahbs_command $@
