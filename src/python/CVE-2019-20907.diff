diff --git a/Lib/tarfile.py b/Lib/tarfile.py
index adf91d53823bb..574a6bb279ddf 100644
--- a/Lib/tarfile.py
+++ b/Lib/tarfile.py
@@ -1400,6 +1400,8 @@ def _proc_pax(self, tarfile):
 
             length, keyword = match.groups()
             length = int(length)
+            if length == 0:
+                raise InvalidHeaderError("invalid header")
             value = buf[match.end(2) + 1:match.start(1) + length - 1]
 
             keyword = keyword.decode("utf8")
diff --git a/Lib/test/recursion.tar b/Lib/test/recursion.tar
new file mode 100644
index 0000000000000..b823725196498
Binary files /dev/null and b/Lib/test/recursion.tar differ
diff --git a/Lib/test/test_tarfile.py b/Lib/test/test_tarfile.py
index 89bd738aea0da..b7ff47f783e72 100644
--- a/Lib/test/test_tarfile.py
+++ b/Lib/test/test_tarfile.py
@@ -321,6 +321,13 @@ def test_premature_end_of_archive(self):
                 with self.assertRaisesRegexp(tarfile.ReadError, "unexpected end of data"):
                     tar.extractfile(t).read()
 
+    def test_length_zero_header(self):
+        # bpo-39017 (CVE-2019-20907): reading a zero-length header should fail
+        # with an exception
+        with self.assertRaisesRegexp(tarfile.ReadError, "file could not be opened successfully"):
+            with tarfile.open(support.findfile('recursion.tar')) as tar:
+                pass
+
 
 class MiscReadTest(CommonReadTest):
     taropen = tarfile.TarFile.taropen
