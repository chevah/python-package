#!/bin/bash
#
# Chevah Build Script for Python.
#
# Import shared code.
. ./functions.sh


chevahbs_configure() {
    CONFIG_ARGS="--disable-shared"

    CONFIGURE_ENVIRONMENT=""

    case $OS in
        "hpux")
            export EXTRA_CFLAGS="-D_REENTRANT"
            export LIBS="-lpthread"
            CONFIG_ARGS="${CONFIG_ARGS} --without-gcc --without-ctypes"
            ;;
        "ubuntu1004")
            # On Ubuntu there are no libXXX.o, but rather linked against the
            # full version number.
            CONFIG_ARGS="${CONFIG_ARGS} \
                --with-bz2-version=1 \
                --with-crypt-version=1 \
                --with-openssl-version=0.9.8 \
                "
            ;;
        "ubuntu1204")
            CONFIG_ARGS="${CONFIG_ARGS} \
                --with-bz2-version=1 \
                --with-crypt-version=1 \
                --with-openssl-version=1.0.0 \
                "
            ;;
        aix*)
            # In AIX we build _ctypes with external libffi, but not the system
            # one. We use our libffi files and statically link against its libs.
            execute mkdir -p build/libffi
            execute cp $INSTALL_FOLDER/tmp/libffi/* build/libffi/
            # The following two parameters are picked up by Python's setup.py
            # and will convince it to use our external libffi for _ctypes.
            export CPPFLAGS="${CPPFLAGS} -Ibuild/libffi/"
            export LDFLAGS="${LDFLAGS} -Lbuild/libffi/"
            # Workaround for http://bugs.python.org/issue21917
            echo "import os; os.__dict__.pop('O_NOFOLLOW', None)" \
                >> Lib/site-packages/sitecustomize.py
            # These files are already created in the Python distribution,
            # but for some strange reason, make tries to recreate them.
            # We just touch them so that make will see them up to date.
            touch Include/Python-ast.h Python/Python-ast.c
            # MAXMEM option with a value greater than 8192.
            CONFIG_ARGS="${CONFIG_ARGS} \
                --with-system-ffi \
                "
            ;;
        solaris*)
            # In Solaris the default OpenSSL installation lives in /usr/sfw/.
            # Both include options are needed to match both the native Sun
            # Studio compiler and GCC.
            if [ "${ARCH%64}" = "$ARCH" ]; then
                echo "_ssl _ssl.c -I/usr/sfw/include" \
                    "-I/usr/sfw/include/openssl -L/usr/sfw/lib" \
                    " -R/usr/sfw/lib -lssl -lcrypto" >> Modules/Setup.local
            else
                CONFIG_ARGS="${CONFIG_ARGS} CFLAGS=-m64 LDFLAGS=-m64"
                echo "_ssl _ssl.c -I/usr/sfw/include" \
                    "-I/usr/sfw/include/openssl -L/usr/sfw/lib/64" \
                    " -R/usr/sfw/lib/64 -lssl -lcrypto" >> Modules/Setup.local
            fi
            ;;
    esac

    case $OS in
        windows)
            echo "Skip configure."
            ;;
        *)
            execute ./configure --prefix="" $CONFIG_ARGS
            ;;
    esac

    case $OS in
        "hpux")
            cp Makefile Makefile.orig
            # On HPUX -DNDEBUG is causing troubles.
            sed "s/^OPT=.*-O/OPT= -O/"  Makefile.orig > Makefile
            ;;
    esac

}


chevahbs_compile() {
    case $OS in
        windows)
            echo "Skip make."
            ;;
        *)
            execute $MAKE
            ;;
    esac
}


chevahbs_install() {
    install_folder=$1
    case $OS in
        windows)
            # On Windows we don't build from source but rather create the
            # distribution from precombiled binaries.
            current_win_path=`pwd -W | sed 's|\/|\\\\|g'`
            install_win_path=`cd $INSTALL_FOLDER && pwd -W | sed 's|\/|\\\\|g'`
            echo "Extracting MSI to $install_win_path"
            execute msiexec \
                //a $current_win_path\\python-installer.msi \
                //qn TARGETDIR=$install_win_path
            echo "Installing setuptool + pip + binaries"
            execute $INSTALL_FOLDER/python ez_setup.py
            execute $INSTALL_FOLDER/python \
                get-pip.py \
                    -i http://pypi.chevah.com:10042/simple
                    --trusted-host=pypi.chevah.com
            execute $INSTALL_FOLDER/python -m pip\
                install -i http://pypi.chevah.com:10042/simple \
                --trusted-host=pypi.chevah.com \
                pyopenssl==0.14 pypiwin32 pycrypto
            ;;
        *)
            execute $MAKE install DESTDIR=$INSTALL_FOLDER
            ;;
    esac
}


select_chevahbs_command $@
