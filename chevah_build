#!/usr/bin/env bash
#
# Chevah Build Script for Python.
#
# build
# test
# publish_production
# publish_staging
#

# Beware that older versions might be used for selected platforms below.
PYTHON_BUILD_VERSION="2.7.14"
LIBFFI_VERSION="3.2.1"
ZLIB_VERSION="1.2.11"
# We statically build the BSD libedit on selected platforms to get the
# readline module available without linking to the GPL-only readline libs.
LIBEDIT_VERSION="20170329-3.1"
# PyCrypto needs GMP or MPIR for fast math. GMP has support for AIX/HP-UX/etc.
GMP_VERSION="6.1.2"
SQLITE_VERSION="3.23.1"
PYSQLITE_VERSION="2.8.3"
# These are used by get-pip.py.
PIP_VERSION="9.0.3"
SETUPTOOLS_VERSION="39.0.1"

# Git revision to inject into Python's sys.version string through chevahbs.
PYTHON_PACKAGE_VERSION=$(git rev-parse --short=8 HEAD)
# The ID of the redistributable version used on Windows.
REDISTRIBUTABLE_VERSION="9.00.30729.6161"

# pycparser needs to be explicitly installed to work around setuptools auto
# dependencies.
PYCPARSER_VERSION="2.14"

# Export the variables needed by the chevahbs scripts and the test phase.
export PYTHON_BUILD_VERSION PYTHON_PACKAGE_VERSION REDISTRIBUTABLE_VERSION
export BUILD_ZLIB="no"
export BUILD_LIBEDIT="yes"
export BUILD_GMP="yes"
export BUILD_LIBFFI="yes"
export BUILD_CFFI="yes"
EXTRA_LIBRARIES="\
    python-modules/cffi-1.11.5 \
    python-modules/pycrypto-2.6.1 \
    "
# Libraries for legacy systems not built around cffi and pip.
EXTRA_LIBRARIES_NO_CFFI="\
    python-modules/pyOpenSSL-0.13 \
    python-modules/pycrypto-2.6.1 \
    python-modules/python-setproctitle-1.1.8.dev0 \
    python-modules/python-scandir-1.7 \
    "

# List of python modules installed using pip
PIP_LIBRARIES="\
    setproctitle==1.1.10 \
    cryptography==2.2.2 \
    pyOpenSSL==17.0.0 \
    scandir==1.7 \
    "
# Pre-combiled libraries distributed as wheels for Windows.
PIP_LIBRARIES_WIN="$PIP_LIBRARIES \
    pypiwin32==219 \
    pycrypto==2.6.1 \
    "

# Arguments that are sent when using pip.
PIP_ARGS="\
    -i http://pypi.chevah.com/simple \
    --trusted-host=pypi.chevah.com \
    "

PROG=$0
DIST_FOLDER='dist'
BUILD_FOLDER='build'

# Import shared code.
. ./functions.sh

# Get default values from main paver script.
./paver.sh detect_os
if [ "$?" -ne 0 ]; then
    exit 1
fi

PYTHON_VERSION=`cut -d' ' -f 2 DEFAULT_VALUES`
OS=`cut -d' ' -f 3 DEFAULT_VALUES`
ARCH=`cut -d' ' -f 4 DEFAULT_VALUES`

# List of OS packages required for building Python.
COMMON_PACKAGES="gcc make m4 automake libtool texinfo"
DEBIAN_PACKAGES="$COMMON_PACKAGES libssl-dev zlib1g-dev libncurses5-dev"
RHEL_PACKAGES="$COMMON_PACKAGES openssl-devel zlib-devel ncurses-devel"
SLES_PACKAGES="$COMMON_PACKAGES libopenssl-devel zlib-devel ncurses-devel"
if [ $OS = 'rhel5' ]; then
    RHEL_PACKAGES="$RHEL_PACKAGES automake15"
elif [ $OS = 'sles10' ]; then
    SLES_PACKAGES="$COMMON_PACKAGES openssl-devel zlib-devel ncurses-devel"
elif [ $OS = 'sles11sm' ]; then
    # SLES 11 with Security Module detected, we need the OpenSSL 1.0.x headers.
    SLES_PACKAGES="$COMMON_PACKAGES libopenssl1-devel zlib-devel ncurses-devel"
fi

# List of OS packages requested to be installed by this script.
INSTALLED_PACKAGES=''
# For now, we don't install anything on OS X, Solaris, AIX, and
# unsupported Linux distros. The build requires a C compiler, GNU make, m4,
# the header files for OpenSSL and zlib, and (optionally) texinfo.
# To build libedit for the readline module, we need the headers of
# a curses library, automake and libtool.
# On platforms with a choice of C compilers, you may choose among the
# available compilers by setting CC and CXX further in this script.

# In Solaris and AIX we use $ARCH to choose if we build a 32bit or 64bit
# package. This way we are able to force a 32bit build on a 64bit machine,
# for example by exporting ARCH in paver.sh as "x86" instead of "x64" or
# "ppc" instead of "ppc64".
# We also use $ARCH when building the statically compiled libffi and GMP.
# $OS is used when patching/configuring/building/testing.
export ARCH
export OS
# Explicitly choose the C compiler in order to make it possible to switch
# between native compilers and GCC on platforms such as AIX and Solaris.
export CC='gcc'
# CXX is not really needed, we export it to make sure g++ won't get picked up
# when not using gcc, and thus silence the associated configure warning.
export CXX='g++'

LOCAL_PYTHON_BINARY_DIST="$PYTHON_VERSION-$OS-$ARCH"
LOCAL_PYTHON_BINARY=./$LOCAL_PYTHON_BINARY_DIST/bin/python
INSTALL_FOLDER=$PWD/${BUILD_FOLDER}/$LOCAL_PYTHON_BINARY_DIST
PYTHON_BIN=$INSTALL_FOLDER/bin/python
PYTHON_BUILD_FOLDER="$PYTHON_VERSION-$OS-$ARCH"

export MAKE=make

# Used when building cffi.
export CHEVAH_BUILD_PATH=$INSTALL_FOLDER

case $OS in
    aix*)
        # By default, we use IBM's XL C compiler. Remove or comment out the
        # CC and CXX lines to use GCC. However, beware that GCC 4.2 from
        # IBM's RPMs will fail with GMP and Python!
        export CC="xlc_r"
        export CXX="xlC_r"
        export MAKE=gmake
        export PATH=/usr/vac/bin:$PATH
        export CFLAGS="$CFLAGS -O2"
        # IBM's OpenSSL libs are mixed 32/64bit binaries in AIX, so we need to
        # be specific about what kind of build we want, because otherwise we
        # might get 64bit libraries (eg. when building GMP).
        if [ "${ARCH%64}" = "$ARCH" ]; then
            export OBJECT_MODE="32"
            export ABI="32"
            export AR="ar -X32"
            if [ "${CC}" != "gcc" ]; then
                export CFLAGS="$CFLAGS -qmaxmem=-1 -q32"
            fi
        else
            export OBJECT_MODE="64"
            export ABI="mode64"
            export AR="ar -X64"
            if [ "${CC}" != "gcc" ]; then
                export CFLAGS="$CFLAGS -qmaxmem=-1 -q64"
            fi
        fi
        # libedit requires __STDC_ISO_10646__.
        export BUILD_LIBEDIT="no"
        ;;
    solaris*)
        # By default, we use Sun's Studio compiler. Comment these two for GCC.
        export CC="cc"
        export CXX="CC"
        export MAKE="gmake"
        if [ "$OS" = "solaris10u3" ]; then
            # pip doesn't like the included zlib from this old Solaris release.
            export BUILD_ZLIB="yes"
            # SQLite libs dir on 10u3 x86.
            export LDFLAGS="$LDFLAGS -L/usr/lib/mps -R/usr/lib/mps"
        fi
        # Here's where the system-included GCC is to be found.
        if [ "${CC}" = "gcc" ]; then
            export PATH="$PATH:/usr/sfw/bin/"
        fi
        # The location for GNU libs in Solaris, including OpenSSL in Solaris 10.
        if [ "${ARCH%64}" = "$ARCH" ]; then
            export LDFLAGS="$LDFLAGS -L/usr/sfw/lib -R/usr/sfw/lib"
            # GMP needs to be told that we aim for a 32bit build.
            export ABI="32"
        else
            export LDFLAGS="$LDFLAGS -m64 -L/usr/sfw/lib/64 -R/usr/sfw/lib/64"
            export CFLAGS="$CFLAGS -m64"
        fi
        if [ "${OS%solaris10*}" = "" ]; then
            # Solaris 10 has OpenSSL 0.9.7, but Python 2 versions starting with
            # 2.7.9 do not support it, see https://bugs.python.org/issue20981.
            PYTHON_BUILD_VERSION=2.7.8
            # Latest libedit sources do not build on Solaris 10 anymore.
            export BUILD_LIBEDIT="no"
            # These are the default-included GNU make and makeinfo.
            export MAKE=/usr/sfw/bin/gmake
            export MAKEINFO=/usr/sfw/bin/makeinfo
            # We favour the BSD-flavoured "install" over the default one.
            # "ar", "nm" and "ld" are included by default in the same path.
            export PATH=/usr/ccs/bin/:$PATH
        fi
        # cffi modules are not ready yet on Solaris.
        # Solaris 10 has OpenSSL 0.9.7, but cryptography requires 1.0.1.
        # 11.x has OpenSSL 1.0.1, but EC crypto is enabled only in 11.3 SRU 19.
        export BUILD_CFFI="no"
        PIP_LIBRARIES=""
        EXTRA_LIBRARIES=$EXTRA_LIBRARIES_NO_CFFI
        ;;
    hpux*)
        # We use HP's compiler, with no warnings, as it generates lots.
        # GCC and the bundled /usr/ccs/bin/cc will fail with pycrypto.
        # No CFLAGS in HP-UX, as some compilations need to set their own.
        # Also, do not put '-w' in CFLAGS because it confuses HP-UX's ldd
        # when compiling Python with -DNDEBUG, the recommended default.
        export CC="/opt/aCC/bin/cc -w"
        export CXX="/opt/aCC/bin/aCC"
        # Native make is needed for parallel builds.
        export MAKE="make -P"
        export BUILD_ZLIB="yes"
        # libedit requires __STDC_ISO_10646__.
        export BUILD_LIBEDIT="no"
        # cryptography 1.9+ needs patching for HP's cc, building it fails with
        # "error #2118: a void function may not return a value" for _openssl.c.
        PIP_LIBRARIES="\
            setproctitle==1.1.10 \
            cryptography==2.2.2chevah3 \
            pyOpenSSL==17.0.0 \
            scandir==1.7 \
            "
        ;;
    osx*)
        # The extra params needed to set the minimum target version to 10.8
        # have the important benefit of getting rid of the libgcc dependency.
        export CC="clang"
        export CXX="clang++"
        export CFLAGS="$CFLAGS -mmacosx-version-min=10.8"
        export MACOSX_DEPLOYMENT_TARGET=10.8
        # OS X 10.8 not supported by cryptography 1.9, so we use 1.8.2.
        PIP_LIBRARIES="\
            setproctitle==1.1.10 \
            cryptography==1.8.2 \
            pyOpenSSL==17.0.0 \
            scandir==1.7 \
            "
        ;;
    macos*)
        # On macOS 10.12 or newer we need the Homebrew version of OpenSSL,
        # as Apple only provides an old OpenSSL version: 0.9.8.
        export CC="clang"
        export CXX="clang++"
        # The location of the Homebrew OpenSSL libs and include directories.
        export LDFLAGS="-L/usr/local/opt/openssl/lib $LDFLAGS"
        export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/openssl/include"
        # setup.py skips building readline by default, as it sets this to
        # "10.4", and then tries to avoid the broken readline in OS X 10.4.
        export MACOSX_DEPLOYMENT_TARGET=10.12
        ;;

    openbsd*)
        export CC=clang
        export CXX=clang++
        # Fix from upstream, newer cryptography versions should work as-is.
        PIP_LIBRARIES="\
            setproctitle==1.1.10 \
            cryptography==2.2.2chevah2 \
            pyOpenSSL==17.0.0 \
            scandir==1.7 \
            "
        ;;
    freebsd*)
        export CC="clang"
        export CXX="clang++"
        ;;
    linux*)
        # We don't compile libedit for generic Linux builds because it links
        # to local ncurses libs and the result is not very portable.
        export BUILD_LIBEDIT="no"
        ;;
    rhel5|sles11)
        # cryptography 1.3.4 is latest version with support for OpenSSL 0.9.8.
        PIP_LIBRARIES="\
            setproctitle==1.1.10 \
            cryptography==1.3.4 \
            pyOpenSSL==16.0.0 \
            scandir==1.7 \
            "
        ;;
    sles10)
        export BUILD_CFFI="no"
        PIP_LIBRARIES=""
        EXTRA_LIBRARIES=$EXTRA_LIBRARIES_NO_CFFI
        ;;
    windows*)
        # On Windows, python executable is installed at a different path.
        LOCAL_PYTHON_BINARY=./$LOCAL_PYTHON_BINARY_DIST/lib/python
        PYTHON_BIN=$INSTALL_FOLDER/lib/python
        # On windows extra libraries are installed only using PIP.
        EXTRA_LIBRARIES=""
        PIP_LIBRARIES=$PIP_LIBRARIES_WIN
        # For Windows we don't build everything from source yet.
        export BUILD_LIBEDIT="no"
        export BUILD_GMP="no"
        # We don't build libffi, as cffi it is available as a wheel in pypi.
        export BUILD_LIBFFI="no"
        ;;
esac

# Compiler-dependent flags. At this moment we should know what compiler is used.
if [ "${OS%solaris*}" = "" ]; then
    if [ ${ARCH} = "sparc64" ]; then
        # Required for compiling GMP on Solaris for SPARC with Sun Studio.
        export CFLAGS="$CFLAGS -xcode=abs64"
    elif [ ${ARCH} = "x64" ]; then
        # Required for linking to libedit, which has a simpler configure setup.
        export CFLAGS="$CFLAGS -xcode=pic32"
    fi
elif [ "${OS%freebsd*}" = "" -o "${OS%openbsd*}" = "" ]; then
    # Use PIC (Position Independent Code) on FreeBSD 10 and newer with Clang.
    export CFLAGS="${CFLAGS} -fPIC"
elif [ "$CC" = "gcc" -a ${ARCH%%64} != "$ARCH" ]; then
    # Use PIC (Position Independent Code) with GCC on 64-bit arches.
    export CFLAGS="${CFLAGS} -fPIC"
fi

# Parallel builds where applicable.
get_number_of_cpus
JOBS=1
case "$ARCH" in
    sparc*)
        # Twice the number of physical CPUs is optimal on SPARC machines.
        let JOBS=2*CPUS
        ;;
    *)
        # On other virtual and physical machines this is close to optimum.
        let JOBS=CPUS
        ;;
esac
if [ "${OS%hpux*}" = "" ]; then
    export PARALLEL="$JOBS"
else
    export MAKE="$MAKE -j${JOBS}"
fi


#
# Check for OS packages required to build Python.
#
check_dependencies() {

    missing_packages=""

    case $OS in
        # Debian-derived distros are similar in this regard.
        ubuntu*|raspbian*)
            packages=$DEBIAN_PACKAGES
            check_command='dpkg --status'
        ;;
        rhel*)
            packages=$RHEL_PACKAGES
            check_command='rpm --query'
        ;;
        sles*)
            packages=$SLES_PACKAGES
            check_command='rpm --query'
        ;;
        macos*)
            # On macOS we need OpenSSL installed via homebrew, but we don't
            # do it automatically, here we only check that the expected
            # OpenSSL version is installed, as hardcoded below.
            homebrew_openssl_version=`brew list --versions openssl`
            if [[ $homebrew_openssl_version != "openssl 1.0.2"* ]]; then
                echo "Unsupported OpenSSL version: $homebrew_openssl_version"
                exit 102
            fi
            packages=''
        ;;
        *)
            packages=''
        ;;
    esac

    if [ -n "$packages" ]; then
        echo "Checking for packages to be installed..."
        for package in $packages ; do
            echo "Checking if $package is installed..."
            $check_command $package
            if [ $? -ne 0 ]; then
                echo "Missing required dependency: $package"
                missing_packages="$missing_packages $package"
            fi
        done
    fi

    if [ -n "$missing_packages" ]; then
        echo "EXIT! Following packages are missing: $missing_packages."
        exit 101
    fi
    if [ -n "$packages" ]; then
        echo "All required packages installed: $packages"
    fi

}


help_text_clean="Clean the build."
command_clean() {
    if [ -e ${BUILD_FOLDER} ]; then
        echo 'Previous build sub-directory found. Removing...'
        rm -rf ${BUILD_FOLDER}
    fi
}

help_text_build="Create the Python binaries for current OS."
command_build() {
    check_dependencies

    # Clean the build dir to avoid contamination from previous builds.
    command_clean

    # Build stuff statically on most platforms, install headers and libs in the
    # following locations and make sure they are picked up when building Python.
    # We used to add the new include path to $CPPFLAGS, but it's not as portable
    # as copying the includes (HP-UX's linker fails with -I when not using GCC).
    mkdir -p $INSTALL_FOLDER/{include,lib}
    export LDFLAGS="-L${INSTALL_FOLDER}/lib/ ${LDFLAGS}"
    export PKG_CONFIG_PATH="${INSTALL_FOLDER}/lib/pkgconfig/:${PKG_CONFIG_PATH}"

    if [ "$BUILD_LIBFFI" = "yes" ]; then
        build 'libffi' "libffi-$LIBFFI_VERSION" ${PYTHON_BUILD_FOLDER}
    else
        (>&2 echo "Skipping building LIBFFI!")
    fi

    if [ "$BUILD_ZLIB" = "yes" ]; then
        build 'zlib' "zlib-$ZLIB_VERSION" ${PYTHON_BUILD_FOLDER}
    else
        (>&2 echo "Skipping building ZLIB!")
    fi

    if [ "$BUILD_LIBEDIT" = "yes" ]; then
        build 'libedit' "libedit-$LIBEDIT_VERSION" ${PYTHON_BUILD_FOLDER}
    else
        (>&2 echo "Skipping building LIBEDIT!")
    fi

    if [ "$BUILD_GMP" = "yes" ]; then
        build 'gmp' "gmp-$GMP_VERSION" ${PYTHON_BUILD_FOLDER}
    else
        (>&2 echo "Skipping building GMP!")
    fi

    case $OS in
        windows*)
            build 'python' "Python-$PYTHON_BUILD_VERSION-windows" ${PYTHON_BUILD_FOLDER}
            ;;
        *)
            build 'python' "Python-$PYTHON_BUILD_VERSION" ${PYTHON_BUILD_FOLDER}
            ;;
    esac

    command_build_sqlite
    command_build_python_extra_libraries

    case $OS in
        windows*)
            echo "Skipping cleaning install folder"
            ;;
        *)
            execute pushd ${BUILD_FOLDER}/${PYTHON_BUILD_FOLDER}
                # Clean the build folder.
                execute rm -rf tmp
                execute mkdir -p lib/config
                safe_move share lib/config
                safe_move pysqlite2-doc lib/config
                # Move all bin to lib/config
                safe_move bin lib/config
                execute mkdir bin
                # Copy back python binary
                execute cp lib/config/bin/$PYTHON_VERSION bin/python
            execute popd
    esac

    # Output the python-package version to a dedicated file in the archive.
    echo "${PYTHON_BUILD_VERSION}.${PYTHON_PACKAGE_VERSION}" \
        > ${BUILD_FOLDER}/${PYTHON_BUILD_FOLDER}/lib/PYTHON_PACKAGE_VERSION

    make_dist 'python' ${PYTHON_BUILD_FOLDER}
}


#
# Build pysqlite with static linked SQLite.
#
command_build_sqlite() {

    if [ $OS = 'windows' ]; then
        echo "Updating SQLite DLL on Windows..."
        execute cp src/sqlite/sqlite3-${SQLITE_VERSION}.dll \
            ${INSTALL_FOLDER}/lib/DLLs/sqlite3.dll
        return
    fi

    target_folder=${BUILD_FOLDER}/pysqlite

    initialize_python_module \
        "python-modules/pysqlite-$PYSQLITE_VERSION" $target_folder

    # Bring SQLite headers and source handy.
    execute cp src/sqlite/SQLite-${SQLITE_VERSION}/*.h \
        ${INSTALL_FOLDER}/include/
    execute cp src/sqlite/SQLite-${SQLITE_VERSION}/sqlite3.c ${target_folder}/

    # Build and install.
    execute pushd $target_folder
        execute $PYTHON_BIN setup.py build_static
        execute $PYTHON_BIN setup.py install
    execute popd

}

#
# Compile and install all Python extra libraries.
#
command_build_python_extra_libraries() {

    # Install the latest PIP and setuptools.
    # But first patch it to get the exact version.
    # get-pip will always try to get the latest version, so we ask it to not
    # install things and then we manually pass what we want to install.
    execute $PYTHON_BIN python-modules/get-pip.py $PIP_ARGS \
        pip==$PIP_VERSION --no-setuptools setuptools==$SETUPTOOLS_VERSION

    # pycparser is installed first as setup_requires is ugly.
    # https://pip.pypa.io/en/stable/reference/pip_install/#controlling-setup-requires
    execute $PYTHON_BIN -m pip \
        install $PIP_ARGS -U pycparser==$PYCPARSER_VERSION

    if [ $OS = 'windows' ]; then
        echo "Skipping makefile updating on Windows"
    else
        # Update Python config Makefile to use the python that we have just
        # created.
        makefile=$INSTALL_FOLDER/lib/$PYTHON_VERSION/config/Makefile
        makefile_orig=$INSTALL_FOLDER/lib/$PYTHON_VERSION/config/Makefile.orig

        execute cp $makefile $makefile_orig
        execute sed "s#^prefix=.*#prefix= $INSTALL_FOLDER#" $makefile_orig \
            > $makefile
    fi

    for library in $EXTRA_LIBRARIES ; do
        # Library is in the form pyopenssl/PyOpenssl-2.4.5
        version_folder=${library#*/}
        target_folder=${BUILD_FOLDER}/$version_folder

        initialize_python_module $library $target_folder

        execute pushd $target_folder
            execute $PYTHON_BIN setup.py install
        execute popd

    done

    for library in $PIP_LIBRARIES ; do
        if [ "${OS%aix*}" = "" ]; then
            # Copy ld_so_aix & co., to be found by all modules.
            mkdir Modules
            cp $INSTALL_FOLDER/lib/$PYTHON_VERSION/config/* Modules/
        fi
        execute $PYTHON_BIN -m pip install $PIP_ARGS $library
    done

    if [ $OS == "windows" ]; then
        echo "Patching pyWin32 manifests to use our redistributable version"
        wipe_manifest $INSTALL_FOLDER/lib/Lib/site-packages/win32/pythonservice.exe
        wipe_manifest $INSTALL_FOLDER/lib/Lib/site-packages/win32/perfmondata.dll
        wipe_manifest $INSTALL_FOLDER/lib/Lib/site-packages/pywin32_system32/pythoncomloader27.dll

        echo "Copy Python runtime to pyWin32 package"
        execute cp $INSTALL_FOLDER/lib/*CRT.manifest \
            $INSTALL_FOLDER/lib/Lib/site-packages/win32/
        execute cp $INSTALL_FOLDER/lib/python27.dll.manifest \
            $INSTALL_FOLDER/lib/Lib/site-packages/win32/
        execute cp $INSTALL_FOLDER/lib/python27.dll \
            $INSTALL_FOLDER/lib/Lib/site-packages/win32/
        execute cp $INSTALL_FOLDER/lib/msvc?90.dll \
            $INSTALL_FOLDER/lib/Lib/site-packages/win32/
        execute cp $INSTALL_FOLDER/lib/Lib/site-packages/pywin32_system32/*.dll \
            $INSTALL_FOLDER/lib/Lib/site-packages/win32/
    fi

}


#
# Initialize Python module for build.
#
initialize_python_module(){
    source_folder=$1
    target_folder=$2

    execute rm -rf $target_folder
    execute cp -r $source_folder $target_folder
    execute pushd $target_folder
        if [ -f setup.cfg ] ; then
            echo "[build_ext]" >> setup.cfg
            echo "include_dirs=$INSTALL_FOLDER/include" >> setup.cfg
            echo "library_dirs=$INSTALL_FOLDER/lib" >> setup.cfg

            # We want to download dependencies from our PyPI and block
            # the official.
            echo "[easy_install]" >> setup.cfg
            echo "find_links=http://pypi.chevah.com/" >> setup.cfg
            echo "allow_hosts=*pypi.chevah.com*" >> setup.cfg
        fi

        case $OS in
            aix*)
                # Copy special link steps in local folder.
                mkdir -p Modules
                cp $INSTALL_FOLDER/lib/$PYTHON_VERSION/config/* Modules
                ;;
            solaris*)
                # Copy special link steps in local folder.
                mkdir -p Modules
                cp $INSTALL_FOLDER/lib/$PYTHON_VERSION/config/* Modules
                extra_args=""
                if [ "${OS%solaris10*}" = "" ]; then
                    # To link pyOpenSSL to included OpenSSL 0.9.7 libs.
                    extra_args="$extra_args -I/usr/sfw/include"
                    if [ "${ARCH%64}" = "$ARCH" ]; then
                        extra_args="$extra_args -L/usr/sfw/lib"
                    else
                        extra_args="$extra_args -L/usr/sfw/lib/64"
                    fi
                fi
                execute $PYTHON_BIN setup.py build_ext $extra_args
                ;;
        esac
    execute popd
}


#
# Test the newly created Python binary dist.
#
help_text_test=\
"Run a quick test for the Python from build."
command_test() {
    test_file='test_python_binary_dist.py'
    execute mkdir -p build/
    execute cp python-modules/chevah-python-test/${test_file} build/
    execute cp python-modules/chevah-python-test/get_binaries_deps.sh build/
    execute pushd build

    echo '##### Executing Chevah tests... #####'
    execute $LOCAL_PYTHON_BINARY ${test_file}

    echo '##### Executing tests for included Python modules... #####'
    echo 'Testing scandir...'
    # There are a series of issues with the scandir tests in Linux/Unix.
    # Reported upstream at https://github.com/benhoyt/scandir/issues/78.
    case $OS in
        osx*|macos*|windows*)
            execute $LOCAL_PYTHON_BINARY \
                ../python-modules/python-scandir-1.7/test/run_tests.py
            ;;
        aix*|hpux*|openbsd*)
            # In OpenBSD there are even more issues actually.
            # Details at https://github.com/benhoyt/scandir/issues/79.
            (>&2 echo -e "\tSkipping because of upstream issues.")
            ;;
        *)
            # Remaining build slaves have the required UTF-8 locale settings
            # available, but they need to be requested for the tests to pass.
            export LC_ALL=en_US.UTF-8
            execute $LOCAL_PYTHON_BINARY \
                ../python-modules/python-scandir-1.7/test/run_tests.py
            export LC_ALL=C
            ;;
    esac

    execute popd
}


#
# Test the newly created Python binary dist.
#
help_text_test_compat=\
"Run a full test for the chevah/compat master."
command_test_compat() {

    execute pushd build

    # To have a better test coverage, we run the tests on compat.
    # Some parts of this is a big hack as we have to force compat to use
    # the local version.
    echo '##### Running chevah.compat tests... #####'
    execute rm -rf compat
    execute git clone https://github.com/chevah/compat.git --depth=1 -b master
    execute pushd compat
    # We patch the Python version to match the one that we have just built
    # and copy it in cache so that it will be picked up by the new build.
    execute echo -e "\nPYTHON_CONFIGURATION=default@${PYTHON_BUILD_VERSION}.${PYTHON_PACKAGE_VERSION}" >> paver.conf
    # Also copy latest paver.sh, as some changes might require it.
    execute cp ../../paver.sh ./
    # Populate the cache with the latest version so that we don't have to
    # download it.
    execute mkdir cache
    execute cp -r ../$LOCAL_PYTHON_BINARY_DIST cache/
    # Some tests might fail due to causes which are not related to python.
    execute ./paver.sh test_ci
    execute popd

    execute popd
}


help_text_publish_python=\
"Upload Python binaries for current OS."
command_publish_python() {
    execute rsync -qrlDvcz \
        ${DIST_FOLDER}/$PYTHON_VERSION/ \
        ${BINARY_DIST_PUBLISH_URI}/$PYTHON_VERSION/
}


# Launch the whole thing.
select_command $@
