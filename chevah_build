#!/usr/bin/env bash
#
# Chevah Build Script for Python.
#
# build
# test
# publish_production
# publish_staging
#

# Beware that version 2.7.8 is used for Solaris 10.
PYTHON_BUILD_VERSION="2.7.18"
LIBFFI_VERSION="3.2.1"
ZLIB_VERSION="1.2.11"
BZIP2_VERSION="1.0.8"
# We statically build the BSD libedit on selected platforms to get the
# readline module available without linking to the GPL-only readline libs.
LIBEDIT_VERSION="20170329-3.1"
# PyCrypto needs GMP or MPIR for fast math. GMP has support for AIX/HP-UX/etc.
GMP_VERSION="6.2.0"
OPENSSL_VERSION="1.1.1h"
SQLITE_VERSION="3.30.1"
PYSQLITE_VERSION="2.8.3"
# These are used by get-pip.py.
PIP_VERSION="20.2.4"
# Version 44.x is the last one to support Python 2.7.
# More at https://github.com/pypa/setuptools/pull/1955.
SETUPTOOLS_VERSION="44.1.1"

# Python modules versions to be used everywhere possible.
CFFI_VERSION="1.14.3"
PYCRYPTO_VERSION="2.6.1"
# PyCrypto 2.6.1 is vulnerable to CVE-2013-7459 and CVE-2018-6594, but we patch
# these vulnerabilities, and mark correspondent Safety IDs as false positives.
# Safety ID 35015 (CVE-2013-7459):
#     "Heap-based buffer overflow in the ALGnew function in block_templace.c in
#     Python Cryptography Toolkit (aka pycrypto) 2.6.1 allows remote attackers
#     to execute arbitrary code as demonstrated by a crafted iv parameter to
#     cryptmsg.py."
SAFETY_FALSE_POSITIVES_OPTS="-i 35015"
# We haven't replaced PyCrypto with PyCryptodome, but we build and test it
# because it has a very comprehensive and demanding test suite.
PYCRYPTODOMEX_VERSION="3.9.7"
PYOPENSSL_VERSION="19.1.0"
CRYPTOGRAPHY_VERSION="3.2.1"
SETPROCTITLE_VERSION="1.1.10"
SCANDIR_VERSION="1.10.0"
PSUTIL_VERSION="5.7.3"
CYTHON_VERSION="0.29.21"
SUBPROCESS32_VERSION="3.5.4"
PYWIN32_VERSION="228"
GMPY2_VERSION="2.0.8"
GMPY_VERSION="1.17"
BCRYPT_VERSION="3.1.7"

# pycparser needs to be explicitly installed to work around setuptools auto
# dependencies.
PYCPARSER_VERSION="2.20"

# Current revision for the VC++ 9.0 redistributable version used on Windows.
REDISTRIBUTABLE_VERSION="9.0.30729.9518"

# Git revision to inject into Python's sys.version string through chevahbs.
PYTHON_PACKAGE_VERSION=$(git rev-parse --short=8 HEAD)

# Export the variables needed by the chevahbs scripts and the test phase.
export PYTHON_BUILD_VERSION PYTHON_PACKAGE_VERSION REDISTRIBUTABLE_VERSION
export BUILD_ZLIB="no"
export BUILD_BZIP2="yes"
export BUILD_LIBEDIT="yes"
export BUILD_GMP="yes"
export BUILD_LIBFFI="no"
export BUILD_CFFI="yes"
export BUILD_OPENSSL="no"

# Patches for EXTRA_LIBRARIES modules should reside in a sub-directory named
#"python-modules/lib-${LIB_VERSION}-patches", to be applied when needed
# during the build. See the patches for PyCrypto 2.6.1 for an example.
EXTRA_LIBRARIES="\
    python-modules/cffi-${CFFI_VERSION} \
    python-modules/pycrypto-${PYCRYPTO_VERSION} \
    "
# Libraries for legacy systems not built around cffi and pip.
EXTRA_LIBRARIES_NO_CFFI="\
    python-modules/pycrypto-${PYCRYPTO_VERSION} \
    python-modules/pycryptodomex-${PYCRYPTODOMEX_VERSION} \
    python-modules/bcrypt-${BCRYPT_VERSION} \
    "
# List of default Python modules installed using pip.
PIP_LIBRARIES="\
    pycryptodomex==${PYCRYPTODOMEX_VERSION} \
    cryptography==${CRYPTOGRAPHY_VERSION} \
    pyOpenSSL==${PYOPENSSL_VERSION} \
    scandir==${SCANDIR_VERSION} \
    Cython==${CYTHON_VERSION} \
    subprocess32==${SUBPROCESS32_VERSION} \
    bcrypt==${BCRYPT_VERSION} \
    psutil==${PSUTIL_VERSION} \
    setproctitle==${SETPROCTITLE_VERSION}
    "
# cryptography 1.3.4 was last upstream version to support OpenSSL 0.9.8.
# pyOpenSSL 16.0.0 was last upstream version to support OpenSSL 0.9.8.
PIP_LIBRARIES_OPENSSL_098="\
    setproctitle==${SETPROCTITLE_VERSION} \
    pycryptodomex==${PYCRYPTODOMEX_VERSION} \
    cryptography==1.3.4 \
    pyOpenSSL==16.0.0 \
    scandir==${SCANDIR_VERSION} \
    psutil==${PSUTIL_VERSION} \
    Cython==${CYTHON_VERSION} \
    subprocess32==${SUBPROCESS32_VERSION} \
    bcrypt==${BCRYPT_VERSION} \
    "
# Python modules installed through pip on systems not built around cffi.
# pyOpenSSL 0.13.1 was last upstream version before the port to
# the cffi-based OpenSSL bindings provided by the cryptography module.
# pyOpenSSL 0.13.1, that fixes CVE-2013-4314, requires SSL_set_SSL_CTX.
# psutil not included because it's broken on HP-UX (where it doesn't build),
# and on Solaris (where it builds just fine, but version 5.6.1 doesn't work).
PIP_LIBRARIES_NO_CFFI="\
    pyOpenSSL==0.13.1 \
    setproctitle==${SETPROCTITLE_VERSION} \
    scandir==${SCANDIR_VERSION} \
    Cython==${CYTHON_VERSION} \
    subprocess32==${SUBPROCESS32_VERSION} \
    "

# Arguments that are sent when using pip.
PIP_ARGS="\
    --index-url=http://pypi.chevah.com/simple \
    --trusted-host=pypi.chevah.com \
    "

PROG=$0
DIST_FOLDER='dist'
BUILD_FOLDER='build'

# Import shared code.
. ./functions.sh

# Import build environment variables found through "detect_os" command option.
. ./BUILD_ENV_VARS

# List of OS packages required for building Python/pyOpenSSL/cryptography etc.
# Lately we don't install anything automatically, we just check for the
# presence of required packages. Or at least of the required commands...
# This build of Python / pyOpenSSL / cryptography / etc.  requires:
# a C compiler, make, m4, libs and headers for OpenSSL / zlib / libffi,
# git (for patching Python's version), patch (for applying our own patches),
# and optionally texinfo (link texinfo to `true` if missing on your platform).
# To build libedit for the readline module, we need the headers of
# a curses library, automake and libtool.
# On platforms with a choice of C compilers, you may choose among the
# available compilers by setting CC and CXX further down in this script.
COMMON_PKGS="gcc make m4 automake libtool texinfo patch"
DEBIAN_PKGS="$COMMON_PKGS git libssl-dev zlib1g-dev libffi-dev libncurses5-dev"
RHEL_PKGS="$COMMON_PKGS git openssl-devel zlib-devel libffi-devel ncurses-devel"
ALPINE_COMMON_PKGS="$COMMON_PKGS\
    git zlib-dev libffi-dev ncurses-dev linux-headers"
ALPINE_LIBRESSL_PKGS="$ALPINE_COMMON_PKGS libc-dev libressl-dev"
ALPINE_OPENSSL_PKGS="$ALPINE_COMMON_PKGS musl-dev openssl-dev"
ARCH_PKGS="$COMMON_PKGS git libffi ncurses"
# Windows is special, but package management is possible through Chocolatey.
# Chocolatey's git package comes with patch included through bundling MINGW4.
CHOCO_PKGS="vcpython27 make git"

# In Solaris and AIX we use $ARCH to choose if we build a 32bit or 64bit
# package. This way we are able to force a 32bit build on a 64bit machine,
# for example by exporting ARCH in brink.sh as "x86" instead of "x64" or
# "ppc" instead of "ppc64". Except on HP-UX, where we always do 32bit builds.
# $ARCH is also used when statically building libffi/GMP and for testing.
# $OS is used when patching/configuring/building/testing.
export ARCH
export OS
# Explicitly choose the C compiler in order to make it possible to switch
# between native compilers and GCC on platforms such as AIX and Solaris.
export CC='gcc'
# CXX is not really needed, we export it so that g++ won't get picked up when
# not using gcc, and thus silence the associated configure warning on stderr.
export CXX='g++'

LOCAL_PYTHON_BINARY_DIST="$PYTHON_VERSION-$OS-$ARCH"
LOCAL_PYTHON_BINARY=./$LOCAL_PYTHON_BINARY_DIST/bin/python
INSTALL_FOLDER=$PWD/${BUILD_FOLDER}/$LOCAL_PYTHON_BINARY_DIST
PYTHON_BIN=$INSTALL_FOLDER/bin/python
PYTHON_BUILD_FOLDER="$PYTHON_VERSION-$OS-$ARCH"

export MAKE=make

# Used when building cffi.
export CHEVAH_BUILD_PATH=$INSTALL_FOLDER

case $OS in
    aix*)
        # By default, we use IBM's XL C compiler. Remove or comment out the
        # CC and CXX lines to use GCC. However, beware that GCC 4.2 from
        # IBM's RPMs will fail with GMP and Python!
        export CC="xlc_r"
        export CXX="xlC_r"
        export MAKE=gmake
        export PATH=/usr/vac/bin:$PATH
        export CFLAGS="$CFLAGS -O2 -D_LARGE_FILES=1"
        # IBM's OpenSSL libs are mixed 32/64bit binaries in AIX, so we need to
        # be specific about what kind of build we want, because otherwise we
        # might get 64bit libraries (eg. when building GMP).
        if [ "${ARCH%64}" = "$ARCH" ]; then
            export OBJECT_MODE="32"
            export ABI="32"
            export AR="ar -X32"
            if [ "${CC}" != "gcc" ]; then
                export CFLAGS="$CFLAGS -qmaxmem=-1 -q32"
            fi
        else
            export OBJECT_MODE="64"
            export ABI="mode64"
            export AR="ar -X64"
            if [ "${CC}" != "gcc" ]; then
                export CFLAGS="$CFLAGS -qmaxmem=-1 -q64"
            fi
        fi
        export BUILD_LIBFFI="yes"
        # libedit requires __STDC_ISO_10646__.
        export BUILD_LIBEDIT="no"
        if [ "${OS%aix53}" = "" ]; then
            # psutil doesn't build on AIX 5.3, so we do without it.
            PIP_LIBRARIES="\
                setproctitle==${SETPROCTITLE_VERSION} \
                pycryptodomex==${PYCRYPTODOMEX_VERSION} \
                cryptography==${CRYPTOGRAPHY_VERSION} \
                pyOpenSSL==${PYOPENSSL_VERSION} \
                scandir==${SCANDIR_VERSION} \
                Cython==${CYTHON_VERSION} \
                subprocess32==${SUBPROCESS32_VERSION} \
                bcrypt==${BCRYPT_VERSION} \
                "
        fi
        # As of November 2020, OpenSSL 1.0.2r is the latest version from IBM.
        export CRYPTOGRAPHY_ALLOW_OPENSSL_102="yes"
        ;;
    sol*)
        # By default, we use Sun's Studio compiler. Comment these two for GCC.
        export CC="cc"
        export CXX="CC"
        export MAKE="gmake"
        # Needed for the subprocess32 module.
        # More at https://github.com/google/python-subprocess32/issues/40.
        export CFLAGS="$CFLAGS -DHAVE_DIRFD"
        # Here's where the system-included GCC is to be found.
        if [ "${CC}" = "gcc" ]; then
            export PATH="$PATH:/usr/sfw/bin/"
        fi
        # Arch-specific bits and paths.
        if [ "${ARCH%64}" = "$ARCH" ]; then
            # GMP needs to be told that we aim for a 32bit build.
            export ABI="32"
        else
            export CFLAGS="$CFLAGS -m64"
            export LDFLAGS="$LDFLAGS -m64 -L/usr/lib/64 -R/usr/lib/64"
        fi
        # System includes bzip2 libs by default.
        export BUILD_BZIP2="no"
        if [ "${OS%sol10*}" = "" ]; then
            # "sol10" code path requires OpenSSL 1.0.x patches from Oracle.
            # Check "sol10u3" divergent code path to link to OpenSSL 0.9.7.
            # These are the default-included GNU make and makeinfo.
            export MAKE=/usr/sfw/bin/gmake
            export MAKEINFO=/usr/sfw/bin/makeinfo
            # We favour the BSD-flavoured "install" over the default one.
            # "ar", "nm" and "ld" are included by default in the same path.
            export PATH=/usr/ccs/bin/:$PATH
            # Latest libedit sources do not build on Solaris 10 any more.
            export BUILD_LIBEDIT="no"
            # setuptools 42.0.0 breaks allow-hosts set globally.
            # More at https://github.com/pypa/setuptools/issues/1916.
            SETUPTOOLS_VERSION="41.6.0"
            # bcrypt build fails with the system libffi.
            export BUILD_LIBFFI="yes"
            # NPN functions missing from Oracle's OpenSSL patches, as of version
            # 1.0.2n from January 2018 (patches 151912-11/151913-11). Thus, the
            # new _ssl module in 2.7.9 won't build, error being "_ssl.so: symbol
            # SSL_get0_next_proto_negotiated: referenced symbol not found".
            PYTHON_BUILD_VERSION=2.7.8
            # Elliptic-curve crypto missing too, no cryptography 1.9 or newer.
            # NPN functions needed in cryptography 0.4 and newer. 1.8.2 builds,
            # but at runtime: "cryptography/hazmat/bindings/_openssl.so: symbol
            # SSL_CTX_set_next_proto_select_cb: referenced symbol not found".
            # cryptography 0.3 doesn't build on Solaris 10, so we are stuck.
            export BUILD_CFFI="no"
            add_ignored_safety_ids_for_pyopenssl_false_positives
            PIP_LIBRARIES=$PIP_LIBRARIES_NO_CFFI
            EXTRA_LIBRARIES=$EXTRA_LIBRARIES_NO_CFFI
        else
            # Solaris 11 is much more modern, but still has some quirks.
            # Multiple system libffi libs present, this is a problem in 11.4.
            export BUILD_LIBFFI="yes"
            # Build cryptography 3.2.1 against OpenSSL 1.0.2.
            export CRYPTOGRAPHY_ALLOW_OPENSSL_102="yes"
            # Only cryptography 2.4+ builds unpatched with Studio's CC.
            # If there are errors related to "-Wconversion" on older versions,
            # use the diff from https://github.com/pyca/cryptography/pull/4545.
            # cryptography 1.9+ needs EC crypto, enabled in 11.3 SRU19 or newer.
            if [ ! -f /usr/include/openssl/ecdh.h ]; then
                # Solaris 11.2 (or 11.3 up to SRU 18) has OpenSSL 1.0.1 without
                # Elliptic-curve crypto, thus only cryptography 1.8.2 works.
                # pyOpenSSL 17.0.0, last version to support cryptography 1.8.2,
                # but it's vulnerable to CVE-2018-1000807 and CVE-2018-1000807.
                # So we use the libraries not requiring CFFI here.
                export BUILD_CFFI="no"
                add_ignored_safety_ids_for_pyopenssl_false_positives
                PIP_LIBRARIES=$PIP_LIBRARIES_NO_CFFI
                EXTRA_LIBRARIES=$EXTRA_LIBRARIES_NO_CFFI
                # setuptools 42.0.0 breaks allow-hosts set globally.
                # More at https://github.com/pypa/setuptools/issues/1916.
                SETUPTOOLS_VERSION="41.6.0"
            fi
            if [ ! -f /usr/include/openssl/cmac.h ]; then
                # Solaris 11.0/11.1 have OpenSSL 1.0.0 libraries.
                # cryptography 1.6 is the last version to support them.
                # pyOpenSSL 17.0.0, last version to support cryptography 1.6.
                # but it's vulnerable to CVE-2018-1000807 and CVE-2018-1000807.
                # So we use the libraries not requiring CFFI here.
                export BUILD_CFFI="no"
                add_ignored_safety_ids_for_pyopenssl_false_positives
                PIP_LIBRARIES=$PIP_LIBRARIES_NO_CFFI
                EXTRA_LIBRARIES=$EXTRA_LIBRARIES_NO_CFFI
            fi
        fi
        if [ "$OS" = "sol10u3" ]; then
            # This code path also covers linking to OpenSSL 0.9.7 on all Solaris
            # 10 versions, including releases u7 and newer, with updated libc.
            # Paths for OpenSSL 0.9.7 and SQLite libs on Solaris 10.
            # The latter were moved and are found easily on newer releases.
            if [ "${ARCH%64}" = "$ARCH" ]; then
                export LDFLAGS="$LDFLAGS -L/usr/sfw/lib -R/usr/sfw/lib"
                export LDFLAGS="$LDFLAGS -L/usr/lib/mps -R/usr/lib/mps"
            else
                export LDFLAGS="$LDFLAGS -L/usr/sfw/lib/64 -R/usr/sfw/lib/64"
                export LDFLAGS="$LDFLAGS -L/usr/lib/mps/64 -R/usr/lib/mps/64"
            fi
            # pip doesn't like the included zlib on ancient Solaris 10
            # releases, such as Solaris 10u3.
            export BUILD_ZLIB="yes"
            # Solaris 10 has OpenSSL 0.9.7, but Python 2 versions starting with
            # 2.7.9 do not support it, see https://bugs.python.org/issue20981.
            PYTHON_BUILD_VERSION=2.7.8
            # OpenSSL 0.9.7 is unusable with cryptography & current pyOpenSSL.
            # Beware that OpenSSL 0.9.7 libs, as bundled in Solaris 10, lack
            # the SSL_set_SSL_CTX symbol.
            # pyOpenSSL 0.13 was last version to build without SSL_set_SSL_CTX.
            export BUILD_CFFI="no"
            # If latest setproctitle fails, look in the history of this repo
            # for python-modules/python-setproctitle-1.1.8.dev0 for extra libs.
            add_ignored_safety_ids_for_pyopenssl_false_positives
            PIP_LIBRARIES=$PIP_LIBRARIES_NO_CFFI
            EXTRA_LIBRARIES=$EXTRA_LIBRARIES_NO_CFFI
        fi
        ;;
    hpux*)
        # GCC and the bundled /usr/ccs/bin/cc will fail with pycrypto.
        # "aCC -Ae" does parallel builds better, but beware of race conditions.
        # Don't use CFLAGS with native ld, it chokes on some parameters.
        # An alternative is LDSHARED="/opt/aCC/bin/aCC -b" with CC="aCC -Ae".
        # As little warnings as possible, HP's compilers generate lots.
        # Force 32bit binaries (the OS default) and Position-Independent Code.
        export CC="/opt/aCC/bin/cc -w +DD32 +z"
        export CXX="/opt/aCC/bin/aCC"
        # Native make needed for parallel builds, use gmake where this breaks.
        export MAKE="make -P"
        # Even though we don't use CFFI, libffi is needed to build _ctypes,
        # which is then needed by gmpy 1.x
        export BUILD_LIBFFI="yes"
        export BUILD_ZLIB="yes"
        # libedit requires __STDC_ISO_10646__.
        export BUILD_LIBEDIT="no"
        # CFFI/cryptography build on HP-UX, but libffi breaks for CFFI. More at
        # https://bitbucket.org/cffi/cffi/issues/368/segmentation-fault-in-hp-ux
        export BUILD_CFFI="no"
        add_ignored_safety_ids_for_pyopenssl_false_positives
        PIP_LIBRARIES=$PIP_LIBRARIES_NO_CFFI
        # EXTRA_LIBRARIES is EXTRA_LIBRARIES_NO_CFFI minus bcrypt,
        # which doesn't support HP-UX at all.
        EXTRA_LIBRARIES="\
            python-modules/pycrypto-${PYCRYPTO_VERSION} \
            python-modules/pycryptodomex-${PYCRYPTODOMEX_VERSION} \
            "
        ;;
    macos)
        export CC="clang"
        export CXX="clang++"
        # Build as compatible as it makes sense. See brink.sh for the reason.
        export CFLAGS="$CFLAGS -mmacosx-version-min=10.12"
        # setup.py skips building readline by default, as it sets this to
        # "10.4", and then tries to avoid the broken readline in OS X 10.4.
        export MACOSX_DEPLOYMENT_TARGET=10.12
        # System includes bzip2 libs by default.
        export BUILD_BZIP2="no"
        # 10.13 and newer come with LibreSSL instead of the old OpenSSL libs.
        # But 10.13 has version 2.2.7, while cryptography 2.9 requires 2.7.
        # Therefore, we build OpenSSL for both stdlib and cryptography.
        export BUILD_OPENSSL="yes"
        ;;
    fbsd*)
        export CC="clang"
        export CXX="clang++"
        # libffi not available in the base system, only as port/package.
        export BUILD_LIBFFI="yes"
        # System includes bzip2 libs by default.
        export BUILD_BZIP2="no"
        # Build scandir through EXTRA_LIBRARIES, to apply a needed patch.
        PIP_LIBRARIES="\
            pycryptodomex==${PYCRYPTODOMEX_VERSION} \
            cryptography==${CRYPTOGRAPHY_VERSION} \
            pyOpenSSL==${PYOPENSSL_VERSION} \
            Cython==${CYTHON_VERSION} \
            subprocess32==${SUBPROCESS32_VERSION} \
            bcrypt==${BCRYPT_VERSION} \
            psutil==${PSUTIL_VERSION} \
            setproctitle==${SETPROCTITLE_VERSION}
            "
        EXTRA_LIBRARIES="$EXTRA_LIBRARIES \
            python-modules/scandir-${SCANDIR_VERSION} \
            "
        ;;
    obsd*)
        export CC="clang"
        export CXX="clang++"
        # libffi not available in the base system, only as port/package.
        export BUILD_LIBFFI="yes"
        ;;
    lnx)
        # Build as portable as possible, only glibc 2.x should be needed.
        export BUILD_LIBFFI="yes"
        export BUILD_ZLIB="yes"
        export BUILD_LIBEDIT="no"
        # Generic Linux might be an old distro with OpenSSL 0.9.8 libraries.
        # To avoid linking to local libs, we build our own OpenSSL libs.
        export BUILD_OPENSSL="yes"
        # OpenSSL tests on CentOS 5 require an updated Perl 5.10 in /usr/local.
        export PATH="/usr/local/bin:$PATH"
        ;;
    amzn2|rhel7)
        # Build cryptography 3.2.1 against OpenSSL 1.0.2.
        export CRYPTOGRAPHY_ALLOW_OPENSSL_102="yes"
        ;;
    win)
        # On Windows, python executable is installed at a different path.
        LOCAL_PYTHON_BINARY=./$LOCAL_PYTHON_BINARY_DIST/lib/python
        PYTHON_BIN=$INSTALL_FOLDER/lib/python
        # For Windows we don't build everything from source yet.
        export BUILD_LIBEDIT="no"
        export BUILD_GMP="no"
        export BUILD_BZIP2="no"
        # Extra libraries are installed only using PIP.
        EXTRA_LIBRARIES=""
        # A patched PyCrypto is packed and uploaded to our PyPI server.
        PIP_LIBRARIES="$PIP_LIBRARIES \
            pycrypto==${PYCRYPTO_VERSION}chevah1 \
            pywin32==${PYWIN32_VERSION} \
            gmpy2==${GMPY2_VERSION} \
            "
        ;;
esac

# Compiler-dependent flags. At this moment we should know what compiler is used.
if [ "${OS%sol*}" = "" ]; then
    if [ ${ARCH} = "sparc64" ]; then
        # Required for compiling GMP on Solaris for SPARC with Sun Studio.
        export CFLAGS="$CFLAGS -xcode=abs64"
    elif [ ${ARCH} = "x64" -a "${OS%sol11*}" = "" ]; then
        # Not all packages enable PIC, we force it to avoid relocation issues.
        export CFLAGS="$CFLAGS -Kpic"
    fi
elif [ "${OS%fbsd*}" = "" -o "${OS%obsd*}" = "" ]; then
    # Use PIC (Position Independent Code) on FreeBSD and OpenBSD with Clang.
    export CFLAGS="${CFLAGS} -fPIC"
elif [ "$CC" = "gcc" -a ${ARCH%%64} != "$ARCH" ]; then
    # Use PIC (Position Independent Code) with GCC on 64-bit arches.
    export CFLAGS="${CFLAGS} -fPIC"
fi

# Parallel builds where applicable.
get_number_of_cpus
JOBS=1
case "$ARCH" in
    sparc*)
        # Twice the number of physical CPUs is optimal on SPARC machines.
        let JOBS=2*CPUS
        ;;
    *)
        # On other virtual and physical machines this is close to optimum.
        let JOBS=CPUS
        ;;
esac
if [ "${OS%hpux*}" = "" ]; then
    export PARALLEL="$JOBS"
else
    export MAKE="$MAKE -j${JOBS}"
fi


#
# Check for OS packages required to build Python.
#
check_dependencies() {

    packages=''
    missing_packages=''

    case $OS in
        # Debian-derived distros are similar in this regard.
        ubuntu*)
            packages=$DEBIAN_PKGS
            check_command='dpkg --status'
            ;;
        rhel*|amzn*)
            packages=$RHEL_PKGS
            check_command='rpm --query'
            ;;
        alpine*)
            # Alpine 3.9 switched back to OpenSSL as default.
            packages=$ALPINE_OPENSSL_PKGS
            case $OS in
                alpine36|alpine37|alpine38)
                    packages=$ALPINE_LIBRESSL_PKGS
                    ;;
            esac
            check_command=apk_shim
            ;;
        archlinux)
            packages=$ARCH_PKGS
            check_command='pacman -Qi'
            ;;
        # On remaining OS'es we just check for some of the needed commands.
        hpux*)
            # Included CFLAGS get in the way on HP-UX.
            packages="/opt/aCC/bin/cc make m4 git patch"
            check_command="command -v"
            ;;
        macos)
            packages="$CC make m4 libtool git patch"
            check_command="command -v"
            ;;
        lnx)
            # Generic Linux builds need Perl 5.10.0+ for building OpenSSL.
            # For testing OpenSSL, Test::More 0.96 or newer is needed.
            packages="$CC make m4 git patch perl"
            check_command="command -v"
            ;;
        win)
            # The windows build is special.
            command -v choco
            if [ $? -eq 0 ]; then
                # Chocolatey is present, let's use it.
                packages=$CHOCO_PKGS
                check_command="choco info --local-only --limit-output"
            else
                packages="make git patch"
                check_command="command -v"
            fi
            ;;
        *)
            packages="$CC make m4 git patch"
            check_command="command -v"
            ;;
    esac

    if [ -n "$packages" ]; then
        echo "Checking for required packages or commands..."
        for package in $packages ; do
            echo "Checking if $package is available..."
            $check_command $package
            if [ $? -ne 0 ]; then
                echo "Missing required dependency: $package"
                missing_packages="$missing_packages $package"
            fi
        done
    fi

    if [ -n "$missing_packages" ]; then
        (>&2 echo "Missing required dependencies: $missing_packages.")
        exit 101
    fi
    if [ -n "$packages" ]; then
        echo "All required dependencies are present: $packages"
    fi

    # Many systems don't have this installed and we don't really need it.
    command -v makeinfo
    if [ $? -ne 0 ]; then
        (>&2 echo "Missing makeinfo, trying to link it to /bin/true in ~/bin.")
        mkdir -p ~/bin
        ln -s /bin/true ~/bin/makeinfo
        export PATH=$PATH:~/bin/
    fi
}


help_text_clean="Clean the build."
command_clean() {
    if [ -e ${BUILD_FOLDER} ]; then
        echo 'Previous build sub-directory found. Removing...'
        rm -rf ${BUILD_FOLDER}
    fi
}

help_text_build="Create the Python binaries for current OS."
command_build() {
    check_dependencies

    # Clean the build dir to avoid contamination from previous builds.
    command_clean

    # Build stuff statically on most platforms, install headers and libs in the
    # following locations and make sure they are picked up when building Python.
    # We used to add the new include path to $CPPFLAGS, but it's not as portable
    # as copying the includes (HP-UX's linker fails with -I when not using GCC).
    mkdir -p $INSTALL_FOLDER/{include,lib}
    export LDFLAGS="-L${INSTALL_FOLDER}/lib/ ${LDFLAGS}"
    export PKG_CONFIG_PATH="${INSTALL_FOLDER}/lib/pkgconfig/:${PKG_CONFIG_PATH}"

    if [ "$BUILD_LIBFFI" = "yes" ]; then
        build 'libffi' "libffi-$LIBFFI_VERSION" ${PYTHON_BUILD_FOLDER}
    else
        (>&2 echo "Skipping building LIBFFI!")
    fi

    if [ "$BUILD_ZLIB" = "yes" ]; then
        build 'zlib' "zlib-$ZLIB_VERSION" ${PYTHON_BUILD_FOLDER}
    else
        (>&2 echo "Skipping building ZLIB!")
    fi

    if [ "$BUILD_BZIP2" = "yes" ]; then
        build 'bzip2' "bzip2-$BZIP2_VERSION" ${PYTHON_BUILD_FOLDER}
    else
        (>&2 echo "Skipping building BZIP2!")
    fi

    if [ "$BUILD_LIBEDIT" = "yes" ]; then
        build 'libedit' "libedit-$LIBEDIT_VERSION" ${PYTHON_BUILD_FOLDER}
    else
        (>&2 echo "Skipping building LIBEDIT!")
    fi

    if [ "$BUILD_GMP" = "yes" ]; then
        build 'gmp' "gmp-$GMP_VERSION" ${PYTHON_BUILD_FOLDER}
    else
        (>&2 echo "Skipping building GMP!")
    fi

    if [ "$BUILD_OPENSSL" = "yes" ]; then
        build 'openssl' "openssl-$OPENSSL_VERSION" ${PYTHON_BUILD_FOLDER}
        # The '-Wl,-rpath' voodoo is needed when building cryptography w/ pip.
        export LDFLAGS="-L${INSTALL_FOLDER}/lib64/ \
            -Wl,-rpath,${INSTALL_FOLDER}/lib64/ ${LDFLAGS}"
        export PKG_CONFIG_PATH="\
            ${INSTALL_FOLDER}/lib64/pkgconfig/:${PKG_CONFIG_PATH}"
        # Place SSL headers where they can be picked up.
        echo "Copying OpenSSL $OPENSSL_VERSION headers..."
        execute cp -r \
            src/openssl/openssl-${OPENSSL_VERSION}/include/openssl \
            ${INSTALL_FOLDER}/include/
        # To make sure they're found, we're back to using CPPFLAGS.
        export CPPFLAGS="$CPPFLAGS -I${INSTALL_FOLDER}/include"
    else
        (>&2 echo "Skipping building OpenSSL!")
    fi

    case $OS in
        win)
            build 'python' "Python-$PYTHON_BUILD_VERSION-windows" \
                ${PYTHON_BUILD_FOLDER}
            ;;
        macos)
            # The headers for zlib are missing on macOS 10.14+.
            # Required CPPFLAGS are already set after building OpenSSL.
            echo "Copying zlib $ZLIB_VERSION headers..."
            execute cp src/zlib/zlib-${ZLIB_VERSION}/*.h \
                $INSTALL_FOLDER/include/
            build 'python' "Python-$PYTHON_BUILD_VERSION" ${PYTHON_BUILD_FOLDER}
            ;;
        *)
            build 'python' "Python-$PYTHON_BUILD_VERSION" ${PYTHON_BUILD_FOLDER}
            ;;
    esac

    aix_ld_hack init
    command_build_sqlite
    command_build_gmpy
    command_build_python_extra_libraries
    aix_ld_hack cleanup

    case $OS in
        win)
            echo "Skipping cleaning install folder"
            ;;
        *)
            execute pushd ${BUILD_FOLDER}/${PYTHON_BUILD_FOLDER}
                # Clean the build folder.
                execute rm -rf tmp
                execute mkdir -p lib/config
                safe_move share lib/config
                safe_move pysqlite2-doc lib/config
                # Move all bin to lib/config
                safe_move bin lib/config
                execute mkdir bin
                # Copy back python binary
                execute cp lib/config/bin/$PYTHON_VERSION bin/python
            execute popd
            ;;
    esac

    # Output the python-package version to a dedicated file in the archive.
    echo "${PYTHON_BUILD_VERSION}.${PYTHON_PACKAGE_VERSION}" \
        > ${BUILD_FOLDER}/${PYTHON_BUILD_FOLDER}/lib/PYTHON_PACKAGE_VERSION

    make_dist 'python' ${PYTHON_BUILD_FOLDER}
}


#
# Build pysqlite with static linked SQLite.
#
command_build_sqlite() {

    if [ $OS = 'win' ]; then
        echo "Updating SQLite DLL on Windows..."
        execute cp src/sqlite/sqlite3-${SQLITE_VERSION}-${ARCH}.dll \
            ${INSTALL_FOLDER}/lib/DLLs/sqlite3.dll
        return
    fi

    target_folder=${BUILD_FOLDER}/pysqlite

    initialize_python_module \
        "python-modules/pysqlite-$PYSQLITE_VERSION" $target_folder

    # Bring SQLite headers and source handy.
    execute cp src/sqlite/SQLite-${SQLITE_VERSION}/*.h \
        ${INSTALL_FOLDER}/include/
    execute cp src/sqlite/SQLite-${SQLITE_VERSION}/sqlite3.c ${target_folder}/

    # Build and install.
    execute pushd $target_folder
        execute $PYTHON_BIN setup.py build_static
        execute $PYTHON_BIN setup.py install
    execute popd

}

#
# Build gmpy2 without MPFR and MPC library support.
# Beware that beginning with v2.1.0, MPFR and MPC will be required.
# On Windows we use the upstream wheel.
# On HP-UX gmpy2 is problematic, so we build gmpy.
#
command_build_gmpy() {

    if [ $OS = 'win' ]; then
        return
    fi

    if [ $OS = 'hpux1131' ]; then
        target_folder=${BUILD_FOLDER}/gmpy

        initialize_python_module \
            "python-modules/gmpy-$GMPY_VERSION" $target_folder

        # Build and install.
        execute pushd $target_folder
            execute $PYTHON_BIN setup.py install
        execute popd
        return
    fi

    target_folder=${BUILD_FOLDER}/gmpy2

    initialize_python_module \
        "python-modules/gmpy2-$GMPY2_VERSION" $target_folder

    # Build and install.
    execute pushd $target_folder
        execute $PYTHON_BIN setup.py install --nompfr
    execute popd
}

#
# Compile and install all Python extra libraries.
#
command_build_python_extra_libraries() {

    # Install the latest PIP and setuptools.
    # But first patch it to get the exact version.
    # get-pip will always try to get the latest version, so we ask it to not
    # install things and then we manually pass what we want to install.
    execute $PYTHON_BIN python-modules/get-pip.py $PIP_ARGS \
        pip==$PIP_VERSION --no-setuptools setuptools==$SETUPTOOLS_VERSION

    # pycparser is installed first as setup_requires is ugly.
    # https://pip.pypa.io/en/stable/reference/pip_install/#controlling-setup-requires
    execute $PYTHON_BIN -m pip \
        install $PIP_ARGS -U pycparser==$PYCPARSER_VERSION

    if [ $OS = 'win' ]; then
        echo "Skipping makefile updating on Windows"
    else
        # Update Python config Makefile to use the python that we have just
        # created.
        makefile=$INSTALL_FOLDER/lib/$PYTHON_VERSION/config/Makefile
        makefile_orig=$INSTALL_FOLDER/lib/$PYTHON_VERSION/config/Makefile.orig

        execute cp $makefile $makefile_orig
        execute sed "s#^prefix=.*#prefix= $INSTALL_FOLDER#" $makefile_orig \
            > $makefile
    fi

    for library in $EXTRA_LIBRARIES ; do
        # Library is in the form pyopenssl/PyOpenssl-2.4.5
        version_folder=${library#*/}
        target_folder=${BUILD_FOLDER}/$version_folder

        # Patch the sources if there's a patches sub-dir with the right name.
        if [ -d "$library"-patches ]; then
            for patch_file in "$library"-patches/*; do
                echo "Applying patch: $patch_file"
                execute pushd "$library"
                    execute patch -p1 < ../../"$patch_file"
                execute popd
            done
        fi
        initialize_python_module $library $target_folder

        execute pushd $target_folder
            execute $PYTHON_BIN setup.py install
        execute popd

    done

    for library in $PIP_LIBRARIES ; do
        execute $PYTHON_BIN -m pip install $PIP_ARGS $library
    done

    if [ "$OS" = "win" ]; then
        echo "Patching pyWin32 manifests to use our redistributable version"
        wipe_manifest $INSTALL_FOLDER/lib/Lib/site-packages/win32/pythonservice.exe
        wipe_manifest $INSTALL_FOLDER/lib/Lib/site-packages/win32/perfmondata.dll
        wipe_manifest $INSTALL_FOLDER/lib/Lib/site-packages/pywin32_system32/pythoncomloader27.dll

        echo "Copy Python runtime to pyWin32 package"
        execute cp $INSTALL_FOLDER/lib/*CRT.manifest \
            $INSTALL_FOLDER/lib/Lib/site-packages/win32/
        execute cp $INSTALL_FOLDER/lib/python27.dll.manifest \
            $INSTALL_FOLDER/lib/Lib/site-packages/win32/
        execute cp $INSTALL_FOLDER/lib/python27.dll \
            $INSTALL_FOLDER/lib/Lib/site-packages/win32/
        execute cp $INSTALL_FOLDER/lib/msvc?90.dll \
            $INSTALL_FOLDER/lib/Lib/site-packages/win32/
        execute cp $INSTALL_FOLDER/lib/Lib/site-packages/pywin32_system32/*.dll \
            $INSTALL_FOLDER/lib/Lib/site-packages/win32/
    fi

}


#
# Initialize Python module for build.
#
initialize_python_module(){
    source_folder=$1
    target_folder=$2

    execute rm -rf $target_folder
    execute cp -r $source_folder $target_folder
    execute pushd $target_folder
        if [ -f setup.cfg ] ; then
            echo "[build_ext]" >> setup.cfg
            echo "include_dirs=$INSTALL_FOLDER/include" >> setup.cfg
            echo "library_dirs=$INSTALL_FOLDER/lib" >> setup.cfg

            # We want to download dependencies from our PyPI and block
            # the official.
            echo "[easy_install]" >> setup.cfg
            echo "find_links=http://pypi.chevah.com/" >> setup.cfg
            echo "allow_hosts=*pypi.chevah.com*" >> setup.cfg
        fi

        case $OS in
            sol10u3*)
                # Copy special link steps in local folder.
                mkdir -p Modules
                cp $INSTALL_FOLDER/lib/$PYTHON_VERSION/config/* Modules
                extra_args=""
                 # To link pyOpenSSL to included OpenSSL 0.9.7 libs.
                extra_args="$extra_args -I/usr/sfw/include"
                if [ "${ARCH%64}" = "$ARCH" ]; then
                    extra_args="$extra_args -L/usr/sfw/lib"
                else
                    extra_args="$extra_args -L/usr/sfw/lib/64"
                fi
                execute $PYTHON_BIN setup.py build_ext $extra_args
                ;;
        esac
    execute popd
}


#
# Test the newly created Python binary dist.
#
help_text_test=\
"Run a quick test for the Python from build."
command_test() {
    test_file='test_python_binary_dist.py'
    execute mkdir -p build/
    execute cp python-modules/chevah-python-test/${test_file} build/
    execute cp python-modules/chevah-python-test/get_binaries_deps.sh build/
    execute pushd build

    echo '##### Executing Chevah tests... #####'
    execute $LOCAL_PYTHON_BINARY ${test_file}

    echo '##### Testing for outdated packages and security issues... #####'
    execute $PYTHON_BIN -m pip list --outdated --format=columns
    execute $PYTHON_BIN -m pip install $PIP_ARGS safety==1.8.7
    execute $PYTHON_BIN -m safety check --full-report \
        $SAFETY_FALSE_POSITIVES_OPTS $SAFETY_IGNORED_OPTS
    if [ -n "$SAFETY_FALSE_POSITIVES_OPTS" ]; then
        SAFETY_FALSE_POSITIVES_IDS="\
            $(echo $SAFETY_FALSE_POSITIVES_OPTS | sed s/\-i\ //g)"
        echo "Following Safety DB IDs were excepted as false positives:"
        echo "${SAFETY_FALSE_POSITIVES_IDS}"
    fi
    if [ -n "$SAFETY_IGNORED_OPTS" ]; then
        SAFETY_IGNORED_IDS="\
            $(echo $SAFETY_IGNORED_OPTS | sed s/\-i\ //g)"
        (>&2 echo "Following Safety DB IDs were excepted from checks:")
        (>&2 echo "${SAFETY_IGNORED_IDS}")
    fi
    # Avoid having output messages sometimes mangled for some reason.
    sleep 1

    echo '##### Executing tests for included Python modules... #####'

    # This test requires quite some RAM, so beware of heavy swapping.
    echo 'Testing PyCryptodomex...'
    case "$OS-$ARCH" in
        hpux*)
            # FIXME:5017:
            # CFFI crashes on HP-UX.
            (>&2 echo -e "\tSkipping because of cffi-related crash.")
            ;;
        *)
            execute $LOCAL_PYTHON_BINARY -m Cryptodome.SelfTest
            ;;
    esac

    echo 'Testing scandir...'
    # There are a series of issues with the scandir tests in Linux/Unix.
    # Reported upstream at https://github.com/benhoyt/scandir/issues/78.
    SCANDIR_FOLDER="../python-modules/scandir-${SCANDIR_VERSION}"
    case "$OS-$ARCH" in
        macos|osx|win)
            execute $LOCAL_PYTHON_BINARY ${SCANDIR_FOLDER}/test/run_tests.py
            ;;
        aix*|hpux*|sol10-sparc)
            (>&2 echo -e "\tSkipping because of upstream issues.")
            ;;
        *)
            # Remaining build slaves have the required UTF-8 locale settings
            # available, but they need to be requested for the tests to pass.
            export LC_ALL=en_US.UTF-8
            execute $LOCAL_PYTHON_BINARY ${SCANDIR_FOLDER}/test/run_tests.py
            export LC_ALL=C
            ;;
    esac

    execute popd
}


#
# Test the newly created Python binary dist.
#
help_text_test_compat=\
"Run a full test for the chevah/compat master."
command_test_compat() {

    # compat is not suported on these platforms, so no need to test.
    case "$OS-$ARCH" in
        sol112-sparc)
            (>&2 echo -e "\tCompat tests not supported on this platform.")
            return
            ;;
    esac

    execute pushd build

    # To have a better test coverage, we run the tests on compat.
    # Some parts of this is a big hack as we have to force compat to use
    # the local version.
    echo '##### Running chevah.compat tests... #####'
    execute rm -rf compat
    execute git clone https://github.com/chevah/compat.git --depth=1 -b master
    execute pushd compat
    # Copy over current brink stuff, as some changes might require it.
    execute cp ../../brink.{conf,sh} ./
    # We patch the Python version to match the one that we have just built
    # and copy it in cache so that it will be picked up by the new build.
    execute echo -e "\nPYTHON_CONFIGURATION=default@${PYTHON_BUILD_VERSION}.${PYTHON_PACKAGE_VERSION}" >> brink.conf
    # Populate the cache with the latest version so that we don't have to
    # download it.
    execute mkdir cache
    execute cp -r ../$LOCAL_PYTHON_BINARY_DIST cache/
    # Make sure everything is done from scratch in the current dir.
    unset CHEVAH_CACHE CHEVAH_BUILD
    # Some tests might fail due to causes which are not related to python.
    execute ./brink.sh deps
    execute ./brink.sh test_ci
    execute popd

    execute popd
}


help_text_publish_python=\
"Upload Python binaries for current OS."
command_publish_python() {
    execute rsync -qrlDvcz \
        ${DIST_FOLDER}/$PYTHON_VERSION/ \
        ${BINARY_DIST_PUBLISH_URI}/$PYTHON_VERSION/
}


# Launch the whole thing.
select_command $@
